%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 15.3.2 (Build 24D81) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
116.5 42 m
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
116.5 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
115.5 0 m
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
115.5 0 l
h
S
Q
q
16.460501 18.342501 m
19.9266 15.5357 24.8836 15.5357 28.349701 18.342501 c
27.009501 19.9974 l
24.3248 17.8234 20.485399 17.8234 17.800699 19.9974 c
16.460501 18.342501 l
h
W
0 0 132 43 rc
15.4605 20.9974 m
29.349701 20.9974 l
29.349701 14.5357 l
15.4605 14.5357 l
h
f
Q
q
17.903999 21.986601 2.1296 2.8769 rc
16.903999 25.863501 m
21.0336 25.863501 l
21.0336 20.986601 l
16.903999 20.986601 l
h
f
Q
q
24.511999 21.986601 2.1294999 2.8769 rc
23.511999 25.863501 m
27.6415 25.863501 l
27.6415 20.986601 l
23.511999 20.986601 l
h
f
Q
q
33.5 21 m
33.5 14.6487 28.351299 9.5 22 9.5 c
15.6487 9.5 10.5 14.6487 10.5 21 c
10.5 27.351299 15.6487 32.5 22 32.5 c
28.351299 32.5 33.5 27.351299 33.5 21 c
h
31.370501 21 m
31.370501 15.8248 27.1752 11.6295 22 11.6295 c
16.8248 11.6295 12.6295 15.8248 12.6295 21 c
12.6295 26.1752 16.8248 30.370501 22 30.370501 c
27.1752 30.370501 31.370501 26.1752 31.370501 21 c
h
W*
0 0 132 43 rc
9.5 33.5 m
34.5 33.5 l
34.5 8.5 l
9.5 8.5 l
h
f
Q
q
101.542 10.3392 m
96.9552 23.171101 l
93.897202 23.171101 l
89.2752 10.3392 l
92.104599 10.3392 l
93.0009 12.977 l
97.7724 12.977 l
98.607101 10.3392 l
101.542 10.3392 l
h
95.399803 20.2374 m
97.016701 15.1882 l
93.730301 15.1882 l
95.399803 20.2374 l
h
W*
0 0 132 43 rc
88.2752 24.171101 m
102.542 24.171101 l
102.542 9.3392 l
88.2752 9.3392 l
h
f
Q
q
73.548401 20.037201 m
74.807899 20.037201 75.792 19.5874 76.5009 18.687799 c
77.215599 17.7882 77.572899 16.627501 77.572899 15.2056 c
77.572899 13.7315 77.221397 12.5098 76.518402 11.5406 c
75.815498 10.5713 74.834198 10.0867 73.574699 10.0867 c
72.783897 10.0867 72.1483 10.2434 71.6679 10.5568 c
71.380898 10.7426 71.070396 11.0676 70.736504 11.5319 c
70.736504 10.3392 l
68.284897 10.3392 l
68.284897 23.1537 l
70.780403 23.1537 l
70.780403 18.591999 l
71.096802 19.0331 71.445297 19.369699 71.826103 19.6019 c
72.277199 19.892099 72.851303 20.037201 73.548401 20.037201 c
h
72.906898 12.1325 m
73.5513 12.1325 74.0522 12.3908 74.4095 12.9073 c
74.766899 13.4239 74.945503 14.1029 74.945503 14.9444 c
74.945503 15.6176 74.857697 16.174801 74.6819 16.6159 c
74.348 17.451599 73.732903 17.869499 72.836601 17.869499 c
71.928596 17.869499 71.304703 17.4603 70.964996 16.642 c
70.7892 16.206699 70.701302 15.6438 70.701302 14.9531 c
70.701302 14.1406 70.882896 13.4674 71.246101 12.9334 c
71.609398 12.3995 72.162903 12.1325 72.906898 12.1325 c
h
W*
0 0 132 43 rc
67.284897 24.1537 m
78.572899 24.1537 l
78.572899 9.0867004 l
67.284897 9.0867004 l
h
f
Q
q
60.263901 10.818 m
59.9827 11.1024 59.842098 11.5406 59.842098 12.1325 c
59.842098 17.9739 l
58.5065 17.9739 l
58.5065 19.741199 l
59.842098 19.741199 l
59.842098 22.3876 l
62.320099 22.3876 l
62.320099 19.741199 l
63.875401 19.741199 l
63.875401 17.9739 l
62.320099 17.9739 l
62.320099 12.9596 l
62.320099 12.5707 62.3699 12.327 62.469501 12.2283 c
62.569099 12.1354 62.873699 12.089 63.383301 12.089 c
63.620602 12.089 l
63.7085 12.0948 63.7934 12.1006 63.875401 12.1064 c
63.875401 10.2521 l
62.689201 10.2086 l
61.505798 10.168 60.697399 10.3711 60.263901 10.818 c
h
W
0 0 132 43 rc
57.5065 23.3876 m
64.875397 23.3876 l
64.875397 9.1680002 l
57.5065 9.1680002 l
h
f
Q
q
58.4091 15.0663 m
58.4091 13.6734 58.004902 12.4808 57.196499 11.4883 c
56.3881 10.5017 55.160801 10.0084 53.514702 10.0084 c
51.8685 10.0084 50.641201 10.5017 49.832802 11.4883 c
49.024399 12.4808 48.620201 13.6734 48.620201 15.0663 c
48.620201 16.436001 49.024399 17.622801 49.832802 18.6269 c
50.641201 19.630899 51.8685 20.1329 53.514702 20.1329 c
55.160801 20.1329 56.3881 19.630899 57.196499 18.6269 c
58.004902 17.622801 58.4091 16.436001 58.4091 15.0663 c
h
53.505901 12.089 m
54.238098 12.089 54.800499 12.3473 55.193001 12.8638 c
55.585499 13.3803 55.7817 14.1145 55.7817 15.0663 c
55.7817 16.018101 55.585499 16.749399 55.193001 17.260099 c
54.800499 17.7766 54.238098 18.034901 53.505901 18.034901 c
52.773602 18.034901 52.208302 17.7766 51.809898 17.260099 c
51.4174 16.749399 51.221199 16.018101 51.221199 15.0663 c
51.221199 14.1145 51.4174 13.3803 51.809898 12.8638 c
52.208302 12.3473 52.773602 12.089 53.505901 12.089 c
h
W*
0 0 132 43 rc
47.620201 21.1329 m
59.4091 21.1329 l
59.4091 9.0084 l
47.620201 9.0084 l
h
f
Q
q
46.66 19.2798 m
46.0331 19.796301 45.224701 20.0546 44.234699 20.0546 c
43.443901 20.0546 42.790699 19.863001 42.2752 19.48 c
41.988098 19.265301 41.683498 18.914101 41.361301 18.4266 c
41.361301 19.810801 l
38.944801 19.810801 l
38.944801 10.3392 l
41.440399 10.3392 l
41.440399 15.4755 l
41.440399 16.0616 41.5224 16.543301 41.686401 16.920601 c
42.0028 17.634399 42.585602 17.9914 43.435101 17.9914 c
44.126301 17.9914 44.595001 17.747601 44.841 17.260099 c
44.9758 16.993099 45.043098 16.6101 45.043098 16.111 c
45.043098 10.3392 l
47.609001 10.3392 l
47.609001 16.729099 l
47.609001 17.9188 47.292599 18.768999 46.66 19.2798 c
h
W
0 0 132 43 rc
37.944801 21.0546 m
48.609001 21.0546 l
48.609001 9.3392 l
37.944801 9.3392 l
h
f
Q
q
79.357399 8.5023003 m
79.0411 8.5197001 l
79.0411 6.5349002 l
79.310501 6.5174999 79.512604 6.5088 79.6474 6.5088 c
79.782097 6.5029998 79.9608 6.5001001 80.183403 6.5001001 c
81.290604 6.5001001 82.028702 6.7177 82.397797 7.1529999 c
82.7668 7.5825 83.2677 8.6968002 83.900398 10.4959 c
87.186798 19.828199 l
84.5243 19.828199 l
82.547096 12.829 l
80.455803 19.828199 l
77.670303 19.828199 l
81.185097 9.9212999 l
81.208603 9.8516998 81.1558 9.6602001 81.027 9.3467999 c
80.9039 9.0333996 80.769203 8.8273001 80.622803 8.7286997 c
80.470398 8.6241999 80.282997 8.5574999 80.060402 8.5284996 c
79.837799 8.4994001 79.603401 8.4906998 79.357399 8.5023003 c
h
W
0 0 132 43 rc
76.670303 20.828199 m
88.186798 20.828199 l
88.186798 5.5001001 l
76.670303 5.5001001 l
h
f
Q
q
103.849 20.9884 m
103.849 12.5189 l
102.254 12.5189 l
102.254 10.3362 l
107.948 10.3362 l
107.948 12.5189 l
106.538 12.5189 l
106.538 20.9884 l
107.948 20.9884 l
107.948 23.171101 l
102.254 23.171101 l
102.254 20.9884 l
103.849 20.9884 l
h
W
0 0 132 43 rc
101.254 24.171101 m
108.948 24.171101 l
108.948 9.3361998 l
101.254 9.3361998 l
h
f
Q
q
86.360397 28.5781 m
87.659203 32.495098 l
88.552696 32.495098 l
88.438904 32.186501 88.186096 31.4825 87.7939 30.383801 c
87.500504 29.557301 87.254303 28.8834 87.056602 28.362301 c
86.5895 27.1346 86.260002 26.3857 86.068398 26.116199 c
85.876701 25.846901 85.547096 25.711901 85.080101 25.711901 c
84.966499 25.711901 84.878304 25.7166 84.815399 25.725599 c
84.7556 25.7346 84.680603 25.751499 84.590797 25.7754 c
84.590797 26.5117 l
84.7314 26.472799 84.833603 26.4494 84.8965 26.440399 c
84.959198 26.431499 85.014702 26.4268 85.0625 26.4268 c
85.212097 26.4268 85.3218 26.452 85.390602 26.502899 c
85.462402 26.5508 85.522499 26.610901 85.570297 26.6826 c
85.585503 26.7071 85.639 26.83 85.7314 27.0508 c
85.824203 27.272301 85.891701 27.437099 85.933601 27.544901 c
84.155296 32.495098 l
85.071297 32.495098 l
86.360397 28.5781 l
h
W
0 0 132 43 rc
83.155296 33.495098 m
89.552696 33.495098 l
89.552696 24.711901 l
83.155296 24.711901 l
h
f
Q
q
40.7715 32.612301 m
41.316399 32.612301 41.7789 32.4025 42.159199 31.9834 c
42.539501 31.567101 42.730499 30.971001 42.730499 30.195299 c
42.7304 29.147301 42.4562 28.398399 41.908199 27.9492 c
41.560902 27.664801 41.156399 27.522499 40.695301 27.522499 c
40.332901 27.522499 40.028801 27.601999 39.783199 27.7607 c
39.6395 27.850599 39.479401 28.004999 39.3027 28.2236 c
39.3027 25.7666 l
38.494099 25.7666 l
38.494099 32.472698 l
39.2803 32.472698 l
39.2803 31.834999 l
39.442001 32.0536 39.6189 32.223 39.810501 32.3428 c
40.083 32.52232 40.403301 32.612301 40.7715 32.612301 c
h
40.586899 31.9023 m
40.0271 31.902201 39.6441 31.622299 39.4375 31.0625 c
39.326698 30.7631 39.2715 30.3829 39.2715 29.9219 c
39.2715 29.550501 39.326698 29.2342 39.4375 28.9736 c
39.647099 28.476601 40.030102 28.2276 40.586899 28.227501 c
40.964199 28.227501 41.277802 28.3848 41.526402 28.6992 c
41.777901 29.016701 41.903301 29.4902 41.903301 30.119101 c
41.903301 30.502501 41.848099 30.8319 41.737301 31.107401 c
41.527699 31.637501 41.143902 31.9023 40.586899 31.9023 c
h
W*
0 0 132 43 rc
37.494099 33.612301 m
43.730499 33.612301 l
43.730499 24.7666 l
37.494099 24.7666 l
h
f
Q
q
55.076199 32.634769 m
55.6959 32.634689 56.220299 32.427898 56.648399 32.014599 c
57.076401 31.6014 57.290001 30.993601 57.290001 30.191401 c
57.290001 29.415899 57.101799 28.774599 56.724602 28.2686 c
56.347301 27.7624 55.761398 27.508801 54.9678 27.508801 c
54.306099 27.508801 53.780899 27.732599 53.391602 28.178699 c
53.0023 28.627899 52.807598 29.2297 52.807598 29.9844 c
52.807598 30.7929 53.0126 31.436899 53.422901 31.916 c
53.833099 32.3951 54.384399 32.634769 55.076199 32.634769 c
h
55.053699 31.929701 m
54.559601 31.929701 54.200199 31.740601 53.975601 31.3633 c
53.750999 30.986 53.638699 30.531 53.638699 29.997999 c
53.638699 29.485901 53.750999 29.0592 53.975601 28.7178 c
54.2001 28.376499 54.556 28.2052 55.0439 28.205099 c
55.5798 28.205099 55.9468 28.407499 56.144501 28.811501 c
56.3452 29.2188 56.446301 29.671801 56.446301 30.1689 c
56.446201 30.617901 56.374199 30.9832 56.230499 31.264601 c
56.002899 31.7078 55.6106 31.9296 55.053699 31.929701 c
h
W*
0 0 132 43 rc
51.807598 33.634769 m
58.290001 33.634769 l
58.290001 26.508801 l
51.807598 26.508801 l
h
f
Q
q
45.359402 32.603519 m
45.700802 32.603519 46.032101 32.522072 46.352501 32.360401 c
46.6726 32.201801 46.916401 31.995399 47.084 31.741199 c
47.245701 31.4986 47.354301 31.215 47.408199 30.8916 c
47.4561 30.67 47.4795 30.316799 47.4795 29.832001 c
43.953098 29.832001 l
43.968102 29.343901 44.083199 28.9508 44.298801 28.654301 c
44.5144 28.360901 44.848701 28.214899 45.3008 28.2148 c
45.7229 28.2148 46.060001 28.3535 46.311501 28.6318 c
46.4552 28.793501 46.557301 28.9809 46.617199 29.193399 c
47.412102 29.193399 l
47.391102 29.0168 47.3209 28.819099 47.201199 28.600599 c
47.0844 28.385 46.9524 28.208 46.805698 28.070299 c
46.560101 27.8309 46.255798 27.6698 45.8936 27.585899 c
45.699001 27.538099 45.478901 27.5137 45.233398 27.5137 c
44.634602 27.5137 44.127201 27.7309 43.710899 28.165001 c
43.294701 28.602301 43.085899 29.2134 43.085899 29.997999 c
43.085999 30.770399 43.295799 31.3978 43.714802 31.8799 c
44.134102 32.362 44.682598 32.603519 45.359402 32.603519 c
h
45.309601 31.898399 m
44.938599 31.8983 44.627399 31.7633 44.375999 31.494101 c
44.124401 31.2276 43.990601 30.8869 43.975601 30.4736 c
46.648399 30.4736 l
46.615501 30.823999 46.5397 31.104799 46.419899 31.314501 c
46.198299 31.703699 45.827599 31.898399 45.309601 31.898399 c
h
W*
0 0 132 43 rc
42.085899 33.603519 m
48.4795 33.603519 l
48.4795 26.5137 l
42.085899 26.5137 l
h
f
Q
q
70.0215 32.603519 m
70.362701 32.603458 70.693398 32.521999 71.013702 32.360401 c
71.334 32.201698 71.5784 31.9956 71.746101 31.741199 c
71.907799 31.4986 72.015404 31.215 72.069298 30.8916 c
72.117203 30.67 72.141602 30.3169 72.141602 29.832001 c
68.615196 29.832001 l
68.630203 29.343901 68.7453 28.9508 68.960899 28.654301 c
69.176598 28.360901 69.510803 28.2148 69.962898 28.2148 c
70.385002 28.214899 70.722099 28.353399 70.973602 28.6318 c
71.117302 28.793501 71.219398 28.980801 71.279297 29.193399 c
72.074203 29.193399 l
72.0532 29.0168 71.983002 28.819099 71.863297 28.600599 c
71.746498 28.385 71.614502 28.208099 71.467796 28.070299 c
71.222198 27.830799 70.917999 27.6698 70.555702 27.585899 c
70.361 27.538 70.140999 27.5137 69.8955 27.5137 c
69.296501 27.5137 68.7883 27.730801 68.372101 28.165001 c
67.955902 28.602301 67.748001 29.2136 67.748001 29.997999 c
67.7481 30.7705 67.957802 31.3978 68.376999 31.8799 c
68.796204 32.362 69.344704 32.603519 70.0215 32.603519 c
h
69.971703 31.898399 m
69.600403 31.898399 69.288597 31.763599 69.037102 31.494101 c
68.7855 31.2276 68.652702 30.8869 68.637703 30.4736 c
71.310501 30.4736 l
71.277603 30.823999 71.200798 31.104799 71.0811 31.314501 c
70.859398 31.703501 70.489601 31.898399 69.971703 31.898399 c
h
W*
0 0 132 43 rc
66.748001 33.603519 m
73.141602 33.603519 l
73.141602 26.5137 l
66.748001 26.5137 l
h
f
Q
q
76.738297 27.684601 m
76.010696 27.684601 l
76.010696 28.3535 l
75.822098 28.057199 75.599197 27.842699 75.341797 27.710899 c
75.084198 27.579201 74.788498 27.5137 74.4561 27.5137 c
73.920097 27.5138 73.455704 27.7384 73.063499 28.1875 c
72.671303 28.6397 72.475601 29.2407 72.475601 29.9893 c
72.4757 30.689899 72.653503 31.2966 73.009804 31.808599 c
73.369102 32.323502 73.881302 32.580971 74.545898 32.581051 c
74.9142 32.581051 75.223099 32.503319 75.471703 32.347698 c
75.615303 32.2579 75.778397 32.100399 75.960899 31.875999 c
75.960899 34.30566 l
76.738297 34.30566 l
76.738297 27.684601 l
h
74.699203 31.875999 m
74.291901 31.875999 73.960602 31.7197 73.7061 31.408199 c
73.454597 31.0968 73.329201 30.6388 73.329102 30.034201 c
73.329102 29.5191 73.438599 29.087601 73.657204 28.7402 c
73.875801 28.3929 74.225899 28.2188 74.708 28.2188 c
75.082298 28.2188 75.389397 28.378901 75.628899 28.6992 c
75.871498 29.022699 75.993202 29.485901 75.993202 30.0879 c
75.993103 30.6957 75.868698 31.1451 75.620102 31.435499 c
75.371597 31.729 75.064499 31.8759 74.699203 31.875999 c
h
W*
0 0 132 43 rc
71.475601 35.30566 m
77.738297 35.30566 l
77.738297 26.5137 l
71.475601 26.5137 l
h
f
Q
q
93.056602 32.612301 m
93.622498 32.612301 94.082199 32.504559 94.435501 32.289101 c
94.785896 32.073399 94.960899 31.7374 94.960899 31.2822 c
94.960899 28.5107 l
94.960999 28.427 94.977798 28.359501 95.010696 28.308599 c
95.0466 28.257799 95.120003 28.2325 95.230499 28.232401 c
95.266403 28.232401 95.307602 28.234301 95.352501 28.237301 c
95.3974 28.243299 95.445297 28.250799 95.496101 28.2598 c
95.496101 27.6621 l
95.3703 27.6262 95.273903 27.603701 95.208 27.5947 c
95.142197 27.5858 95.052002 27.5811 94.938499 27.5811 c
94.660202 27.5812 94.457703 27.680401 94.332001 27.877899 c
94.266296 27.9827 94.220299 28.130899 94.193398 28.3223 c
94.028603 28.1066 93.791901 27.9195 93.483398 27.7607 c
93.175003 27.601999 92.835197 27.522499 92.463898 27.522499 c
92.017601 27.522499 91.651703 27.6572 91.367203 27.9268 c
91.085899 28.1992 90.945396 28.5392 90.945297 28.946301 c
90.945297 29.3925 91.084801 29.7388 91.363297 29.9844 c
91.641701 30.2299 92.006897 30.381599 92.459 30.438499 c
93.748001 30.5996 l
93.933502 30.623501 94.058098 30.7015 94.121101 30.833 c
94.156998 30.9049 94.174797 31.008801 94.174797 31.1436 c
94.174698 31.4189 94.0765 31.6185 93.878899 31.741199 c
93.684303 31.866899 93.404198 31.929701 93.039101 31.929701 c
92.616798 31.929701 92.317299 31.8155 92.140602 31.5879 c
92.041801 31.462099 91.977203 31.2749 91.947304 31.0264 c
91.192398 31.0264 l
91.207397 31.619301 91.3992 32.031101 91.767601 32.2617 c
92.138901 32.4953 92.568497 32.612301 93.056602 32.612301 c
h
94.152298 30.132799 m
94.053497 30.07 93.926102 30.0175 93.7705 29.975599 c
93.614899 29.933701 93.462097 29.9037 93.3125 29.8857 c
92.823196 29.8223 l
92.529999 29.7834 92.309799 29.722401 92.163101 29.6387 c
91.914597 29.497999 91.7901 29.273199 91.790001 28.9648 c
91.790001 28.7313 91.875198 28.5469 92.045898 28.4121 c
92.216599 28.277399 92.4188 28.209999 92.652298 28.209999 c
92.936699 28.209999 93.212097 28.2756 93.4785 28.4072 c
93.927696 28.625799 94.152298 28.984301 94.152298 29.4814 c
94.152298 30.132799 l
h
W*
0 0 132 43 rc
89.945297 33.612301 m
96.496101 33.612301 l
96.496101 26.522499 l
89.945297 26.522499 l
h
f
Q
q
117.034 32.612301 m
117.6 32.612301 118.06 32.50457 118.413 32.289101 c
118.763 32.073399 118.938 31.7374 118.938 31.2822 c
118.938 28.5107 l
118.938 28.427 118.955 28.359501 118.988 28.308599 c
119.024 28.257799 119.097 28.2325 119.208 28.232401 c
119.244 28.232401 119.285 28.234301 119.33 28.237301 c
119.375 28.243299 119.423 28.250799 119.474 28.2598 c
119.474 27.6621 l
119.348 27.6262 119.251 27.603701 119.186 27.5947 c
119.12 27.5858 119.03 27.5811 118.916 27.5811 c
118.638 27.5812 118.435 27.680401 118.31 27.877899 c
118.244 27.9827 118.198 28.130899 118.171 28.3223 c
118.006 28.1066 117.769 27.9195 117.461 27.7607 c
117.153 27.601999 116.813 27.522499 116.441 27.522499 c
115.995 27.522499 115.629 27.6572 115.345 27.9268 c
115.063 28.1992 114.923 28.5392 114.923 28.946301 c
114.923 29.3925 115.062 29.7388 115.341 29.9844 c
115.619 30.2299 115.984 30.381599 116.437 30.438499 c
117.726 30.5996 l
117.911 30.623501 118.036 30.7015 118.099 30.833 c
118.135 30.9049 118.152 31.008801 118.152 31.1436 c
118.152 31.4189 118.054 31.6185 117.856 31.741199 c
117.662 31.866899 117.382 31.9296 117.017 31.929701 c
116.594 31.929701 116.295 31.815399 116.118 31.5879 c
116.019 31.462099 115.955 31.2749 115.925 31.0264 c
115.17 31.0264 l
115.185 31.619301 115.377 32.031101 115.745 32.2617 c
116.116 32.4953 116.546 32.612301 117.034 32.612301 c
h
118.13 30.132799 m
118.031 30.07 117.904 30.0175 117.748 29.975599 c
117.592 29.933701 117.44 29.9037 117.29 29.8857 c
116.801 29.8223 l
116.508 29.7834 116.287 29.722401 116.141 29.6387 c
115.892 29.497999 115.768 29.273199 115.768 28.9648 c
115.768 28.7313 115.853 28.5469 116.023 28.4121 c
116.194 28.277399 116.396 28.209999 116.63 28.209999 c
116.914 28.209999 117.19 28.2756 117.456 28.4072 c
117.905 28.625799 118.13 28.984301 118.13 29.4814 c
118.13 30.132799 l
h
W*
0 0 132 43 rc
113.923 33.612301 m
120.474 33.612301 l
120.474 26.522499 l
113.923 26.522499 l
h
f
Q
q
80.577103 31.9111 m
80.753799 32.141701 80.965401 32.317699 81.210899 32.4375 c
81.456497 32.560242 81.723297 32.62109 82.010696 32.62109 c
82.609596 32.621059 83.094498 32.4142 83.465797 32.000999 c
83.840103 31.5907 84.027298 30.9842 84.027298 30.181601 c
84.027298 29.421101 83.842903 28.7892 83.474602 28.2861 c
83.1063 27.7833 82.596001 27.5313 81.943398 27.5312 c
81.578003 27.5312 81.269096 27.620199 81.017601 27.7969 c
80.867897 27.901699 80.707703 28.069401 80.537102 28.299801 c
80.537102 27.684601 l
79.791 27.684601 l
79.791 34.30566 l
80.577103 34.30566 l
80.577103 31.9111 l
h
81.916 31.898399 m
81.547798 31.898399 81.224701 31.7616 80.946297 31.4893 c
80.670799 31.2167 80.532204 30.7675 80.532204 30.1416 c
80.532204 29.689501 80.589401 29.3225 80.703102 29.041 c
80.915703 28.511 81.312698 28.246201 81.8936 28.246099 c
82.330704 28.246099 82.657402 28.419399 82.873001 28.7666 c
83.091698 29.114 83.201202 29.572599 83.201202 30.1416 c
83.201202 30.647699 83.091698 31.066999 82.873001 31.399401 c
82.657402 31.7318 82.338303 31.898399 81.916 31.898399 c
h
W*
0 0 132 43 rc
78.791 35.30566 m
85.027298 35.30566 l
85.027298 26.5312 l
78.791 26.5312 l
h
f
Q
q
103.815 32.495098 m
103.815 29.3018 l
103.815 29.0562 103.855 28.8549 103.933 28.6992 c
104.076 28.412001 104.344 28.2686 104.736 28.2686 c
105.299 28.2686 105.683 28.5203 105.887 29.023399 c
105.997 29.2929 106.053 29.662901 106.053 30.132799 c
106.053 32.495098 l
106.861 32.495098 l
106.861 27.684601 l
106.098 27.684601 l
106.106 28.394501 l
106.002 28.212 105.871 28.0574 105.716 27.931601 c
105.407 27.680099 105.033 27.553801 104.593 27.553699 c
103.907 27.553699 103.44 27.783199 103.191 28.241199 c
103.057 28.486799 102.989 28.8153 102.989 29.225599 c
102.989 32.495098 l
103.815 32.495098 l
h
W
0 0 132 43 rc
101.989 33.495098 m
107.861 33.495098 l
107.861 26.553699 l
101.989 26.553699 l
h
f
Q
q
52.522499 34.373051 m
52.576401 34.370049 52.638199 34.36536 52.707001 34.359379 c
52.707001 33.623051 l
52.419899 33.636719 l
52.1744 33.636719 52.0275 33.57206 51.9795 33.443359 c
51.931599 33.317581 51.9072 32.993752 51.9072 32.472698 c
52.707001 32.472698 l
52.707001 31.834999 l
51.898399 31.834999 l
51.898399 27.684601 l
51.098598 27.684601 l
51.098598 31.834999 l
50.517601 31.834999 l
50.517601 31.727501 l
50.469799 31.7365 50.424599 31.7421 50.382801 31.7451 c
50.344002 31.7481 50.300701 31.75 50.252899 31.75 c
49.8456 31.75 49.532101 31.618 49.313499 31.3545 c
49.095001 31.094 48.986301 30.7925 48.986301 30.4512 c
48.986301 27.684601 l
48.1777 27.684601 l
48.1777 32.495098 l
48.945301 32.495098 l
48.945301 31.664101 l
49.008202 31.8258 49.162601 32.022301 49.408199 32.252899 c
49.653702 32.486401 49.9366 32.603401 50.256802 32.603519 c
50.271801 32.603519 50.298 32.601631 50.334 32.598629 c
50.3699 32.595631 50.431099 32.59 50.517601 32.581051 c
50.517601 32.472698 l
51.098598 32.472698 l
51.098598 33.227539 l
51.1106 33.562962 51.169601 33.809109 51.274399 33.96484 c
51.4631 34.239971 51.826698 34.37793 52.3652 34.37793 c
52.416 34.37793 52.4687 34.37603 52.522499 34.373051 c
h
W
0 0 132 43 rc
47.1777 35.37793 m
53.707001 35.37793 l
53.707001 26.684601 l
47.1777 26.684601 l
h
f
Q
q
60.1133 32.598629 m
60.1492 32.595631 60.2104 32.59 60.296902 32.581051 c
60.296902 31.727501 l
60.2491 31.7365 60.203899 31.7421 60.162102 31.7451 c
60.123299 31.7481 60.080002 31.75 60.0322 31.75 c
59.625099 31.75 59.312401 31.617901 59.0938 31.3545 c
58.875099 31.093901 58.765598 30.792601 58.765598 30.4512 c
58.765598 27.684601 l
57.957001 27.684601 l
57.957001 32.495098 l
58.724602 32.495098 l
58.724602 31.664101 l
58.787498 31.8258 58.941898 32.022301 59.1875 32.252899 c
59.433102 32.4865 59.716702 32.603519 60.037102 32.603519 c
60.052101 32.603519 60.077702 32.601601 60.1133 32.598629 c
h
W
0 0 132 43 rc
56.957001 33.603519 m
61.296902 33.603519 l
61.296902 26.684601 l
56.957001 26.684601 l
h
f
Q
q
65.639603 32.603519 m
66.286499 32.603519 66.727303 32.369499 66.960899 31.9023 c
67.086601 31.6509 67.149399 31.312599 67.149399 30.887699 c
67.149399 27.684601 l
66.309601 27.684601 l
66.309601 31.0264 l
66.309601 31.3468 66.228104 31.5667 66.066399 31.686501 c
65.9077 31.806299 65.712997 31.866199 65.482399 31.866199 c
65.165001 31.866199 64.890701 31.760401 64.660202 31.547899 c
64.432701 31.3353 64.319397 30.9802 64.319298 30.4834 c
64.319298 27.684601 l
63.497101 27.684601 l
63.497101 30.8242 l
63.497101 31.1507 63.457699 31.389299 63.379902 31.539101 c
63.257099 31.7633 63.028301 31.8759 62.693401 31.875999 c
62.387901 31.875999 62.109001 31.757099 61.857399 31.5205 c
61.609001 31.284 61.484402 30.856001 61.484402 30.2363 c
61.484402 27.684601 l
60.6758 27.684601 l
60.6758 32.495098 l
61.475601 32.495098 l
61.475601 31.8125 l
61.667301 32.049099 61.841301 32.221298 61.997101 32.329102 c
62.263599 32.511688 62.566002 32.603519 62.904301 32.603519 c
63.287399 32.603519 63.5956 32.50882 63.829102 32.320301 c
63.960899 32.212502 64.080704 32.053398 64.188499 31.8438 c
64.368202 32.101299 64.579697 32.292301 64.822304 32.415001 c
65.064697 32.54073 65.337303 32.603519 65.639603 32.603519 c
h
W
0 0 132 43 rc
59.6758 33.603519 m
68.149399 33.603519 l
68.149399 26.684601 l
59.6758 26.684601 l
h
f
Q
q
99.016602 34.30566 m
99.016602 31.8438 l
99.208298 32.0863 99.380501 32.257599 99.533203 32.3564 c
99.793701 32.526989 100.1187 32.612301 100.508 32.612301 c
101.205 32.61227 101.678 32.368 101.927 31.8799 c
102.062 31.6134 102.129 31.2437 102.129 30.7705 c
102.129 27.684601 l
101.298 27.684601 l
101.298 30.716801 l
101.298 31.070101 101.253 31.3295 101.163 31.494101 c
101.016 31.757299 100.741 31.8887 100.3369 31.8887 c
100.0015 31.8887 99.697304 31.7736 99.424797 31.542999 c
99.152496 31.312401 99.016701 30.876801 99.016602 30.2363 c
99.016602 27.684601 l
98.208 27.684601 l
98.208 34.30566 l
99.016602 34.30566 l
h
W
0 0 132 43 rc
97.208 35.30566 m
103.129 35.30566 l
103.129 26.684601 l
97.208 26.684601 l
h
f
Q
q
112.77 32.603519 m
113.416 32.603519 113.857 32.369499 114.091 31.9023 c
114.216 31.6509 114.279 31.312599 114.279 30.887699 c
114.279 27.684601 l
113.439 27.684601 l
113.439 31.0264 l
113.439 31.3468 113.358 31.5667 113.196 31.686501 c
113.038 31.806299 112.843 31.866199 112.612 31.866199 c
112.295 31.866199 112.021 31.760401 111.79 31.547899 c
111.563 31.3353 111.449 30.980301 111.449 30.4834 c
111.449 27.684601 l
110.627 27.684601 l
110.627 30.8242 l
110.627 31.1507 110.588 31.389299 110.51 31.539101 c
110.387 31.7633 110.158 31.8759 109.823 31.875999 c
109.518 31.875999 109.239 31.757099 108.987 31.5205 c
108.739 31.284 108.614 30.856001 108.614 30.2363 c
108.614 27.684601 l
107.806 27.684601 l
107.806 32.495098 l
108.605 32.495098 l
108.605 31.8125 l
108.797 32.049099 108.971 32.221298 109.127 32.329102 c
109.393 32.511681 109.696 32.603519 110.034 32.603519 c
110.417 32.603519 110.725 32.50882 110.959 32.320301 c
111.091 32.212502 111.211 32.053398 111.318 31.8438 c
111.498 32.101299 111.71 32.292301 111.952 32.415001 c
112.195 32.54073 112.467 32.603519 112.77 32.603519 c
h
W
0 0 132 43 rc
106.806 33.603519 m
115.279 33.603519 l
115.279 26.684601 l
106.806 26.684601 l
h
f
Q
q
122.287 32.603519 m
122.97 32.603519 123.431 32.364799 123.671 31.8887 c
123.803 31.628201 123.868 31.2554 123.868 30.7705 c
123.868 27.684601 l
123.046 27.684601 l
123.046 30.716801 l
123.046 31.010201 123.003 31.247101 122.916 31.4268 c
122.772 31.725901 122.512 31.875799 122.135 31.875999 c
121.943 31.875999 121.786 31.856199 121.663 31.8174 c
121.442 31.751499 121.247 31.6194 121.079 31.4219 c
120.944 31.263201 120.855 31.0984 120.813 30.9277 c
120.775 30.76 120.755 30.5186 120.755 30.2041 c
120.755 27.684601 l
119.946 27.684601 l
119.946 32.495098 l
120.715 32.495098 l
120.715 31.8125 l
120.942 32.094002 121.184 32.2962 121.438 32.4189 c
121.693 32.541618 121.976 32.603519 122.287 32.603519 c
h
W
0 0 132 43 rc
118.946 33.603519 m
124.868 33.603519 l
124.868 26.684601 l
118.946 26.684601 l
h
f
ep
end
%%Trailer
%%EOF
