%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 15.3.2 (Build 24D81) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
116.5 42 m
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
116.5 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
115.5 0 m
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
115.5 0 l
h
S
Q
1 1 1 sc
q
28.349701 18.342501 m
24.8836 15.5357 19.9266 15.5357 16.460501 18.342501 c
17.800699 19.9974 l
20.485399 17.8234 24.3248 17.8234 27.009501 19.9974 c
28.349701 18.342501 l
h
W
0 0 132 43 rc
15.4605 20.9974 m
29.349701 20.9974 l
29.349701 14.5357 l
15.4605 14.5357 l
h
f
Q
q
17.903999 21.986601 2.1296 2.8769 rc
16.903999 25.863501 m
21.0336 25.863501 l
21.0336 20.986601 l
16.903999 20.986601 l
h
f
Q
q
24.511999 21.986601 2.1294999 2.8769 rc
23.511999 25.863501 m
27.6415 25.863501 l
27.6415 20.986601 l
23.511999 20.986601 l
h
f
Q
q
22 9.5 m
28.351299 9.5 33.5 14.6487 33.5 21 c
33.5 27.351299 28.351299 32.5 22 32.5 c
15.6487 32.5 10.5 27.351299 10.5 21 c
10.5 14.6487 15.6487 9.5 22 9.5 c
h
22 11.6295 m
27.1752 11.6295 31.370501 15.8248 31.370501 21 c
31.370501 26.1752 27.1752 30.370501 22 30.370501 c
16.8248 30.370501 12.6295 26.1752 12.6295 21 c
12.6295 15.8248 16.8248 11.6295 22 11.6295 c
h
W*
0 0 132 43 rc
9.5 33.5 m
34.5 33.5 l
34.5 8.5 l
9.5 8.5 l
h
f
Q
q
97.096703 23.2178 m
101.681 10.35 l
98.747597 10.35 l
97.913399 12.9951 l
93.144897 12.9951 l
92.2491 10.35 l
89.421402 10.35 l
94.040604 23.2178 l
97.096703 23.2178 l
h
97.158096 15.2125 m
95.542297 20.275801 l
93.873802 15.2125 l
97.158096 15.2125 l
h
W*
0 0 132 43 rc
88.421402 24.2178 m
102.681 24.2178 l
102.681 9.3500004 l
88.421402 9.3500004 l
h
f
Q
q
73.7043 20.075001 m
74.962997 20.075001 75.946602 19.624001 76.654999 18.721901 c
77.369202 17.819799 77.726402 16.6558 77.726402 15.23 c
77.726402 13.7517 77.375099 12.5266 76.672501 11.5547 c
75.970001 10.5828 74.989403 10.0968 73.730698 10.0968 c
72.9403 10.0968 72.305099 10.2539 71.824997 10.5682 c
71.538101 10.7545 71.227898 11.0804 70.894096 11.546 c
70.894096 10.35 l
68.444 10.35 l
68.444 23.2003 l
70.938103 23.2003 l
70.938103 18.6259 l
71.254204 19.068199 71.602501 19.405701 71.983101 19.6385 c
72.433899 19.929501 73.007599 20.075001 73.7043 20.075001 c
h
73.063202 12.1483 m
73.707199 12.1483 74.207802 12.4073 74.564903 12.9253 c
74.921997 13.4433 75.100601 14.1242 75.100601 14.9681 c
75.100601 15.6432 75.012802 16.2019 74.837196 16.644199 c
74.503403 17.4823 73.888702 17.9013 72.992996 17.9013 c
72.085503 17.9013 71.461998 17.490999 71.122498 16.670401 c
70.9468 16.2339 70.859001 15.6694 70.859001 14.9768 c
70.859001 14.162 71.040497 13.4869 71.403503 12.9515 c
71.766502 12.416 72.319702 12.1483 73.063202 12.1483 c
h
W*
0 0 132 43 rc
67.444 24.2003 m
78.726402 24.2003 l
78.726402 9.0967999 l
67.444 9.0967999 l
h
f
Q
q
60.0065 12.1483 m
60.0065 11.5547 60.146999 11.1153 60.428001 10.8301 c
60.861198 10.382 61.669201 10.1783 62.851799 10.219 c
64.0373 10.2627 l
64.0373 12.1221 l
63.955299 12.1163 63.870499 12.1105 63.7826 12.1047 c
63.545502 12.1047 l
63.036201 12.1047 62.7318 12.1512 62.632198 12.2444 c
62.5327 12.3433 62.482899 12.5877 62.482899 12.9777 c
62.482899 18.0061 l
64.0373 18.0061 l
64.0373 19.7782 l
62.482899 19.7782 l
62.482899 22.4321 l
60.0065 22.4321 l
60.0065 19.7782 l
58.6717 19.7782 l
58.6717 18.0061 l
60.0065 18.0061 l
60.0065 12.1483 l
h
W
0 0 132 43 rc
57.6717 23.4321 m
65.0373 23.4321 l
65.0373 9.1782999 l
57.6717 9.1782999 l
h
f
Q
q
58.574402 15.0903 m
58.574402 13.6935 58.170399 12.4975 57.362499 11.5023 c
56.5546 10.5129 55.327999 10.0182 53.682899 10.0182 c
52.0378 10.0182 50.811298 10.5129 50.003399 11.5023 c
49.1954 12.4975 48.7915 13.6935 48.7915 15.0903 c
48.7915 16.4638 49.1954 17.6539 50.003399 18.660801 c
50.811298 19.667601 52.0378 20.171101 53.682899 20.171101 c
55.327999 20.171101 56.5546 19.667601 57.362499 18.660801 c
58.170399 17.6539 58.574402 16.4638 58.574402 15.0903 c
h
53.674099 12.1047 m
54.405998 12.1047 54.967999 12.3637 55.360199 12.8816 c
55.752499 13.3996 55.948601 14.1358 55.948601 15.0903 c
55.948601 16.044701 55.752499 16.778099 55.360199 17.290199 c
54.967999 17.808201 54.405998 18.0672 53.674099 18.0672 c
52.942299 18.0672 52.377399 17.808201 51.979301 17.290199 c
51.587002 16.778099 51.3909 16.044701 51.3909 15.0903 c
51.3909 14.1358 51.587002 13.3996 51.979301 12.8816 c
52.377399 12.3637 52.942299 12.1047 53.674099 12.1047 c
h
W*
0 0 132 43 rc
47.7915 21.171101 m
59.574402 21.171101 l
59.574402 9.0181999 l
47.7915 9.0181999 l
h
f
Q
q
44.408699 20.092501 m
45.398102 20.092501 46.206001 19.8335 46.8325 19.3155 c
47.464699 18.8034 47.780899 17.9508 47.780899 16.7577 c
47.780899 10.35 l
45.216599 10.35 l
45.216599 16.137899 l
45.216599 16.638399 45.1493 17.022499 45.014599 17.290199 c
44.7687 17.7791 44.3004 18.0235 43.609501 18.0235 c
42.760601 18.0235 42.178101 17.6656 41.862 16.949699 c
41.698101 16.5714 41.6161 16.0884 41.6161 15.5006 c
41.6161 10.35 l
39.122101 10.35 l
39.122101 19.848101 l
41.537102 19.848101 l
41.537102 18.459999 l
41.8591 18.9489 42.163502 19.301001 42.450401 19.5163 c
42.965599 19.9004 43.618301 20.092501 44.408699 20.092501 c
h
W
0 0 132 43 rc
38.122101 21.092501 m
48.780899 21.092501 l
48.780899 9.3500004 l
38.122101 9.3500004 l
h
f
Q
q
79.509804 8.5080004 m
79.193604 8.5254002 l
79.193604 6.5349998 l
79.462898 6.5176001 79.664902 6.5088 79.7995 6.5088 c
79.934196 6.5029998 80.112801 6.5001001 80.335197 6.5001001 c
81.441704 6.5001001 82.179398 6.7184 82.548203 7.1549001 c
82.917099 7.5854998 83.417603 8.7028999 84.049896 10.5071 c
87.334297 19.865499 l
84.673401 19.865499 l
82.697502 12.8467 l
80.607498 19.865499 l
77.8237 19.865499 l
81.336403 9.9308996 l
81.359802 9.8611002 81.307098 9.6689997 81.178299 9.3548002 c
81.055298 9.0404997 80.9207 8.8339005 80.7743 8.7349997 c
80.622101 8.6302004 80.434799 8.5633001 80.212303 8.5341997 c
79.989799 8.5051003 79.7556 8.4962997 79.509804 8.5080004 c
h
W
0 0 132 43 rc
76.8237 20.865499 m
88.334297 20.865499 l
88.334297 5.5001001 l
76.8237 5.5001001 l
h
f
Q
q
103.987 12.5358 m
103.987 21.028999 l
102.392 21.028999 l
102.392 23.2178 l
108.083 23.2178 l
108.083 21.028999 l
106.674 21.028999 l
106.674 12.5358 l
108.083 12.5358 l
108.083 10.347 l
102.392 10.347 l
102.392 12.5358 l
103.987 12.5358 l
h
W
0 0 132 43 rc
101.392 24.2178 m
109.083 24.2178 l
109.083 9.3470001 l
101.392 9.3470001 l
h
f
Q
q
83.904297 28.540001 m
85.273399 32.669922 l
86.215797 32.669922 l
86.095802 32.3447 85.828697 31.6022 85.415001 30.443399 c
85.105698 29.572201 84.847 28.861799 84.638702 28.3125 c
84.146301 27.018499 83.798798 26.2288 83.596703 25.9443 c
83.3946 25.6602 83.047096 25.5177 82.554703 25.517599 c
82.4347 25.517599 82.340698 25.5228 82.274399 25.5322 c
82.211403 25.5417 82.1325 25.5588 82.038101 25.584 c
82.038101 26.3613 l
82.186501 26.320299 82.293999 26.2946 82.360397 26.2852 c
82.426498 26.2757 82.484703 26.2705 82.535202 26.2705 c
82.693001 26.2705 82.808197 26.297899 82.880898 26.351601 c
82.956596 26.4021 83.019798 26.4652 83.070297 26.541 c
83.086098 26.566299 83.143402 26.6961 83.241203 26.929701 c
83.338997 27.163099 83.409897 27.336599 83.454102 27.450199 c
81.579102 32.669922 l
82.544899 32.669922 l
83.904297 28.540001 l
h
W
0 0 132 43 rc
80.579102 33.669922 m
87.215797 33.669922 l
87.215797 24.517599 l
80.579102 24.517599 l
h
f
Q
q
58.369099 32.81641 m
59.022499 32.81641 59.574902 32.59861 60.026402 32.163101 c
60.477798 31.7274 60.703999 31.0863 60.704102 30.2402 c
60.704102 29.422501 60.505199 28.7465 60.107399 28.2129 c
59.709599 27.6793 59.091599 27.4121 58.254902 27.4121 c
57.557201 27.412201 57.003201 27.6478 56.5928 28.1182 c
56.182301 28.591801 55.977501 29.226801 55.977501 30.022499 c
55.9776 30.8748 56.193501 31.553499 56.625999 32.058601 c
57.058601 32.563801 57.639702 32.81641 58.369099 32.81641 c
h
58.345699 32.0732 m
57.825001 32.0732 57.445801 31.874001 57.209 31.476601 c
56.972198 31.078699 56.8535 30.5982 56.8535 30.0361 c
56.8535 29.496201 56.972198 29.046499 57.209 28.686501 c
57.445801 28.326599 57.821301 28.1465 58.335899 28.1465 c
58.901001 28.1465 59.287701 28.3599 59.496101 28.7861 c
59.7075 29.215401 59.8134 29.6919 59.813499 30.215799 c
59.813499 30.689501 59.737499 31.0753 59.585899 31.372101 c
59.346001 31.8391 58.932701 32.073101 58.345699 32.0732 c
h
W*
0 0 132 43 rc
54.977501 33.81641 m
61.704102 33.81641 l
61.704102 26.4121 l
54.977501 26.4121 l
h
f
Q
q
66.482399 32.783199 m
66.8423 32.783199 67.191498 32.697811 67.529297 32.52734 c
67.867203 32.360001 68.124901 32.142399 68.301804 31.874001 c
68.472298 31.618299 68.585701 31.3195 68.642601 30.9785 c
68.6931 30.7449 68.718697 30.372499 68.718803 29.8613 c
65 29.8613 l
65.0158 29.3466 65.137901 28.932699 65.365196 28.6201 c
65.592499 28.310801 65.944298 28.1563 66.420898 28.1562 c
66.866096 28.1562 67.222099 28.302999 67.487297 28.596701 c
67.638702 28.767099 67.745499 28.9645 67.808601 29.188499 c
68.647499 29.188499 l
68.625397 29.002199 68.551003 28.7939 68.424797 28.563499 c
68.301697 28.3361 68.162498 28.1492 68.007797 28.003901 c
67.7491 27.7516 67.428596 27.5816 67.046898 27.4932 c
66.841698 27.442699 66.609299 27.417 66.350601 27.417 c
65.719101 27.417 65.182999 27.6457 64.744102 28.1035 c
64.305298 28.564501 64.085999 29.2089 64.085899 30.0361 c
64.085899 30.850599 64.307098 31.512199 64.749001 32.0205 c
65.191002 32.528782 65.768997 32.783112 66.482399 32.783199 c
h
66.430702 32.040001 m
66.039101 32.040001 65.710503 31.8974 65.445297 31.6133 c
65.180199 31.3323 65.040199 30.9737 65.024399 30.538099 c
67.841797 30.538099 l
67.807098 30.907499 67.726898 31.202801 67.600601 31.4238 c
67.366898 31.834299 66.976898 32.040001 66.430702 32.040001 c
h
W*
0 0 132 43 rc
63.085899 33.783199 m
69.718803 33.783199 l
69.718803 26.417 l
63.085899 26.417 l
h
f
Q
q
73.613297 34.578121 m
73.613297 27.596701 l
72.846703 27.596701 l
72.846703 28.3027 l
72.647797 27.990101 72.412201 27.763901 72.140602 27.625 c
71.869202 27.4862 71.558197 27.417 71.208 27.417 c
70.642799 27.417 70.152901 27.654301 69.739304 28.127899 c
69.325798 28.604601 69.119202 29.237301 69.119102 30.0264 c
69.119102 30.7652 69.3069 31.405399 69.682602 31.945299 c
70.061501 32.488201 70.601898 32.759769 71.302696 32.759769 c
71.690903 32.759708 72.016296 32.677799 72.278297 32.513672 c
72.429901 32.4189 72.601402 32.252399 72.7939 32.015598 c
72.7939 34.578121 l
73.613297 34.578121 l
h
71.462898 32.015598 m
71.033798 32.015499 70.685303 31.851601 70.417 31.523399 c
70.151802 31.195101 70.0186 30.712 70.0186 30.0742 c
70.0186 29.531099 70.133797 29.0762 70.364304 28.709999 c
70.594704 28.3437 70.964401 28.1612 71.472702 28.1611 c
71.867203 28.1611 72.190804 28.3295 72.443398 28.667 c
72.699097 29.007999 72.827103 29.496201 72.827103 30.130899 c
72.827103 30.7717 72.696503 31.245501 72.434601 31.5518 c
72.172501 31.8612 71.848099 32.015598 71.462898 32.015598 c
h
W*
0 0 132 43 rc
68.119102 35.578121 m
74.613297 35.578121 l
74.613297 26.417 l
68.119102 26.417 l
h
f
Q
q
40.578098 32.792969 m
41.174801 32.792969 41.659698 32.67944 42.0322 32.452099 c
42.401699 32.2248 42.585899 31.8706 42.585899 31.3906 c
42.585899 28.4688 l
42.585899 28.380501 42.604 28.3095 42.638699 28.255899 c
42.676498 28.2022 42.753502 28.1749 42.870098 28.174801 c
42.907902 28.174801 42.950802 28.1765 42.998001 28.179701 c
43.045399 28.186001 43.096699 28.193701 43.150398 28.2031 c
43.150398 27.5732 l
43.017799 27.5354 42.9161 27.5114 42.846699 27.502001 c
42.777199 27.4925 42.6824 27.4883 42.5625 27.4883 c
42.268902 27.4883 42.055401 27.5924 41.922901 27.8008 c
41.8535 27.911301 41.804798 28.0676 41.776402 28.269501 c
41.602798 28.042299 41.353401 27.844999 41.028301 27.6777 c
40.703098 27.510401 40.344601 27.4268 39.953098 27.4268 c
39.482601 27.4268 39.096802 27.568399 38.796902 27.852501 c
38.500198 28.139799 38.351601 28.4984 38.351601 28.9277 c
38.351601 29.398199 38.499298 29.7635 38.792999 30.022499 c
39.086601 30.281099 39.471699 30.440001 39.9482 30.5 c
41.307598 30.6709 l
41.503201 30.696199 41.633801 30.778299 41.700199 30.917 c
41.738098 30.9928 41.757801 31.1021 41.757801 31.244101 c
41.757801 31.534401 41.6535 31.7446 41.445301 31.874001 c
41.240101 32.006599 40.944599 32.0732 40.559601 32.0732 c
40.114498 32.0732 39.798599 31.9527 39.612301 31.7129 c
39.508099 31.580299 39.4398 31.383101 39.408199 31.121099 c
38.612301 31.121099 l
38.628101 31.746201 38.830399 32.180698 39.2188 32.423801 c
39.610199 32.67004 40.063499 32.792969 40.578098 32.792969 c
h
41.733398 30.178699 m
41.6292 30.1124 41.495201 30.0569 41.3311 30.012699 c
41.166901 29.9685 41.005501 29.936899 40.847698 29.917999 c
40.332001 29.851601 l
40.022598 29.810499 39.790501 29.7456 39.6357 29.6572 c
39.373798 29.5089 39.242298 29.272301 39.242199 28.9473 c
39.242199 28.701 39.332699 28.5063 39.512699 28.3643 c
39.6926 28.2223 39.906101 28.1514 40.152302 28.1514 c
40.452099 28.1514 40.742599 28.220501 41.023399 28.3594 c
41.497002 28.5898 41.733299 28.967199 41.733398 29.491199 c
41.733398 30.178699 l
h
W*
0 0 132 43 rc
37.351601 33.792969 m
44.150398 33.792969 l
44.150398 26.4268 l
37.351601 26.4268 l
h
f
Q
q
91.061501 32.792969 m
91.658203 32.792969 92.143097 32.67947 92.515602 32.452099 c
92.885101 32.2248 93.069298 31.8706 93.069298 31.3906 c
93.069298 28.4688 l
93.069298 28.3804 93.087402 28.3095 93.122101 28.255899 c
93.159897 28.2022 93.236801 28.174801 93.3535 28.174801 c
93.391403 28.174801 93.434097 28.1765 93.4814 28.179701 c
93.528702 28.186001 93.5793 28.193701 93.632797 28.2031 c
93.632797 27.5732 l
93.500397 27.5354 93.399498 27.5114 93.330101 27.502001 c
93.260597 27.4925 93.165901 27.4883 93.045898 27.4883 c
92.752197 27.4883 92.538902 27.5924 92.406197 27.8008 c
92.3368 27.911301 92.2882 28.0676 92.259804 28.269501 c
92.086197 28.042299 91.8367 27.844999 91.511703 27.6777 c
91.1866 27.510401 90.827904 27.4268 90.436501 27.4268 c
89.966103 27.4268 89.5802 27.568399 89.280296 27.852501 c
88.983498 28.139799 88.834999 28.4984 88.834999 28.9277 c
88.834999 29.398199 88.981697 29.7635 89.275398 30.022499 c
89.569 30.281401 89.954903 30.440001 90.431602 30.5 c
91.791 30.6709 l
91.986504 30.696199 92.117302 30.778299 92.183601 30.917 c
92.221497 30.9928 92.240196 31.1021 92.240196 31.244101 c
92.240196 31.534599 92.136101 31.7446 91.927696 31.874001 c
91.722504 32.0065 91.427002 32.0732 91.042 32.0732 c
90.597 32.0732 90.280998 31.952801 90.094704 31.7129 c
89.990601 31.580299 89.923203 31.3829 89.891602 31.121099 c
89.095703 31.121099 l
89.111504 31.746201 89.313797 32.180698 89.702103 32.423801 c
90.093597 32.669979 90.546997 32.792969 91.061501 32.792969 c
h
92.216797 30.178699 m
92.112602 30.1124 91.9786 30.0569 91.814499 30.012699 c
91.650299 29.9685 91.488899 29.936899 91.3311 29.917999 c
90.815399 29.851601 l
90.506104 29.810499 90.273903 29.7456 90.119102 29.6572 c
89.857201 29.5089 89.7257 29.272301 89.725601 28.9473 c
89.725601 28.701 89.816101 28.5063 89.996101 28.3643 c
90.175903 28.222401 90.388702 28.1514 90.634804 28.1514 c
90.9347 28.1514 91.2258 28.2204 91.506798 28.3594 c
91.980301 28.5898 92.216698 28.9673 92.216797 29.491199 c
92.216797 30.178699 l
h
W*
0 0 132 43 rc
87.834999 33.792969 m
94.632797 33.792969 l
94.632797 26.4268 l
87.834999 26.4268 l
h
f
Q
q
116.584 32.792969 m
117.181 32.792969 117.666 32.679298 118.038 32.452099 c
118.408 32.2248 118.593 31.8706 118.593 31.3906 c
118.593 28.4688 l
118.593 28.3806 118.61 28.3095 118.645 28.255899 c
118.682 28.2022 118.76 28.174801 118.877 28.174801 c
118.915 28.174801 118.958 28.1765 119.005 28.179701 c
119.052 28.186001 119.103 28.193701 119.156 28.2031 c
119.156 27.5732 l
119.024 27.5354 118.923 27.511499 118.854 27.502001 c
118.784 27.4925 118.689 27.4883 118.569 27.4883 c
118.276 27.4883 118.062 27.5924 117.93 27.8008 c
117.86 27.911301 117.812 28.067499 117.783 28.269501 c
117.61 28.0422 117.359 27.8451 117.034 27.6777 c
116.709 27.510401 116.35 27.4268 115.959 27.4268 c
115.489 27.4268 115.104 27.568501 114.804 27.852501 c
114.507 28.139799 114.358 28.4984 114.358 28.9277 c
114.358 29.398199 114.505 29.7635 114.799 30.022499 c
115.092 30.2812 115.478 30.440001 115.954 30.5 c
117.313 30.6709 l
117.509 30.696199 117.641 30.778099 117.707 30.917 c
117.745 30.9928 117.764 31.1021 117.764 31.244101 c
117.764 31.534599 117.66 31.7446 117.451 31.874001 c
117.246 32.006599 116.951 32.0732 116.565 32.0732 c
116.12 32.0732 115.804 31.9529 115.618 31.7129 c
115.514 31.580299 115.447 31.382999 115.415 31.121099 c
114.619 31.121099 l
114.635 31.746201 114.837 32.180698 115.226 32.423801 c
115.617 32.669811 116.07 32.7929 116.584 32.792969 c
h
117.74 30.178699 m
117.636 30.112499 117.502 30.0569 117.338 30.012699 c
117.174 29.9685 117.012 29.936899 116.854 29.917999 c
116.338 29.851601 l
116.029 29.810499 115.796 29.7456 115.642 29.6572 c
115.38 29.5089 115.249 29.2722 115.249 28.9473 c
115.249 28.701 115.339 28.5063 115.519 28.3643 c
115.699 28.2222 115.912 28.1514 116.158 28.1514 c
116.458 28.1514 116.748 28.2206 117.029 28.3594 c
117.503 28.5898 117.74 28.967199 117.74 29.491199 c
117.74 30.178699 l
h
W*
0 0 132 43 rc
113.358 33.792969 m
120.156 33.792969 l
120.156 26.4268 l
113.358 26.4268 l
h
f
Q
q
77.758797 34.578121 m
77.758797 32.053699 l
77.945099 32.296799 78.167801 32.482101 78.426804 32.608398 c
78.685501 32.73769 78.966599 32.801762 79.269501 32.801762 c
79.901001 32.80172 80.412201 32.584141 80.803703 32.148399 c
81.198402 31.7159 81.3955 31.0767 81.3955 30.230499 c
81.3955 29.428499 81.201897 28.7619 80.813499 28.2314 c
80.425102 27.701099 79.886497 27.435499 79.198196 27.435499 c
78.813103 27.4356 78.4879 27.529499 78.222702 27.715799 c
78.064796 27.8263 77.895699 28.003099 77.715797 28.246099 c
77.715797 27.596701 l
76.929703 27.596701 l
76.929703 34.578121 l
77.758797 34.578121 l
h
79.169899 32.040001 m
78.781502 32.040001 78.440102 31.8957 78.1465 31.6084 c
77.856201 31.320999 77.710899 30.8472 77.710899 30.1875 c
77.710999 29.710899 77.770699 29.3241 77.890602 29.0273 c
78.114799 28.4685 78.533897 28.189501 79.1465 28.189501 c
79.6073 28.189501 79.951401 28.3722 80.178703 28.7383 c
80.409203 29.1045 80.524399 29.5877 80.524399 30.1875 c
80.524399 30.721001 80.409103 31.1632 80.178703 31.5137 c
79.951401 31.864201 79.615097 32.040001 79.169899 32.040001 c
h
W*
0 0 132 43 rc
75.929703 35.578121 m
82.3955 35.578121 l
82.3955 26.435499 l
75.929703 26.435499 l
h
f
Q
q
44.549801 32.669922 m
44.549801 29.3018 l
44.549801 29.042999 44.590801 28.8311 44.672901 28.667 c
44.824402 28.3641 45.107101 28.212999 45.5205 28.2129 c
46.114101 28.2129 46.5187 28.4783 46.733398 29.008801 c
46.850101 29.2929 46.908199 29.683201 46.908199 30.178699 c
46.908199 32.669922 l
47.7607 32.669922 l
47.7607 27.596701 l
46.9561 27.596701 l
46.965801 28.345699 l
46.8554 28.1532 46.7178 27.99 46.553699 27.857401 c
46.2285 27.592199 45.833302 27.459999 45.369099 27.459999 c
44.646099 27.459999 44.153702 27.7015 43.891602 28.184601 c
43.749599 28.443501 43.678699 28.7892 43.678699 29.221701 c
43.678699 32.669922 l
44.549801 32.669922 l
h
W
0 0 132 43 rc
42.678699 33.669922 m
48.7607 33.669922 l
48.7607 26.459999 l
42.678699 26.459999 l
h
f
Q
q
102.55 29.3018 m
102.55 29.042999 102.591 28.8311 102.673 28.667 c
102.824 28.364 103.108 28.2129 103.521 28.2129 c
104.115 28.212999 104.519 28.478399 104.733 29.008801 c
104.85 29.2929 104.909 29.6831 104.909 30.178699 c
104.909 32.669922 l
105.762 32.669922 l
105.762 27.596701 l
104.956 27.596701 l
104.966 28.345699 l
104.855 28.153099 104.718 27.99 104.554 27.857401 c
104.228 27.592199 103.833 27.459999 103.369 27.459999 c
102.646 27.459999 102.154 27.7015 101.892 28.184601 c
101.75 28.443501 101.679 28.7892 101.679 29.221701 c
101.679 32.669922 l
102.55 32.669922 l
102.55 29.3018 l
h
W
0 0 132 43 rc
100.679 33.669922 m
106.762 33.669922 l
106.762 26.459999 l
100.679 26.459999 l
h
f
Q
q
49.837898 34.085941 m
49.837898 32.669922 l
50.648399 32.669922 l
50.648399 31.9736 l
49.837898 31.9736 l
49.837898 28.663099 l
49.837898 28.4863 49.898602 28.367599 50.0186 28.3076 c
50.0849 28.273001 50.195099 28.255899 50.349602 28.255899 c
50.482399 28.255899 l
50.5298 28.259001 50.5853 28.263201 50.648399 28.269501 c
50.648399 27.596701 l
50.550598 27.5683 50.447201 27.5478 50.339802 27.5352 c
50.235802 27.5226 50.122002 27.5166 49.999001 27.5166 c
49.601501 27.5166 49.3316 27.6175 49.189499 27.8193 c
49.047401 28.024599 48.976601 28.2901 48.976601 28.6152 c
48.976601 31.9736 l
48.289101 31.9736 l
48.289101 32.669922 l
48.976601 32.669922 l
48.976601 34.085941 l
49.837898 34.085941 l
h
W
0 0 132 43 rc
47.289101 35.085941 m
51.648399 35.085941 l
51.648399 26.5166 l
47.289101 26.5166 l
h
f
Q
q
52.067402 34.578121 m
52.067402 31.982401 l
52.269299 32.237999 52.450401 32.418201 52.611301 32.522461 c
52.886002 32.702438 53.229198 32.792969 53.639599 32.792969 c
54.375198 32.792912 54.873699 32.53513 55.1357 32.0205 c
55.277802 31.7395 55.349602 31.3494 55.349602 30.850599 c
55.349602 27.596701 l
54.472698 27.596701 l
54.472698 30.7939 l
54.472698 31.166401 54.425701 31.4396 54.3311 31.6133 c
54.1763 31.8911 53.8853 32.0303 53.459 32.0303 c
53.105499 32.030201 52.785301 31.9081 52.498001 31.665001 c
52.2108 31.4219 52.067402 30.9627 52.067402 30.2871 c
52.067402 27.596701 l
51.214802 27.596701 l
51.214802 34.578121 l
52.067402 34.578121 l
h
W
0 0 132 43 rc
50.214802 35.578121 m
56.349602 35.578121 l
56.349602 26.596701 l
50.214802 26.596701 l
h
f
Q
q
63.7285 32.77832 m
63.766399 32.775162 63.831402 32.769218 63.922901 32.759769 c
63.922901 31.8594 l
63.872299 31.868799 63.824501 31.8757 63.7803 31.878901 c
63.739399 31.882 63.693802 31.883801 63.6436 31.883801 c
63.214199 31.883801 62.883801 31.744499 62.653301 31.466801 c
62.422798 31.192101 62.307598 30.874599 62.307598 30.514601 c
62.307598 27.596701 l
61.455101 27.596701 l
61.455101 32.669922 l
62.264599 32.669922 l
62.264599 31.792999 l
62.331001 31.963499 62.493999 32.170898 62.752899 32.414101 c
63.0117 32.66011 63.309898 32.783112 63.647499 32.783199 c
63.6632 32.783199 63.690601 32.781479 63.7285 32.77832 c
h
W
0 0 132 43 rc
60.455101 33.783199 m
64.922897 33.783199 l
64.922897 26.596701 l
60.455101 26.596701 l
h
f
Q
q
97.441399 34.578121 m
97.441399 31.982401 l
97.643402 32.238098 97.825302 32.418201 97.986298 32.522461 c
98.261002 32.702438 98.604202 32.792969 99.014603 32.792969 c
99.750099 32.792858 100.2487 32.53508 100.511 32.0205 c
100.653 31.7395 100.724 31.3494 100.724 30.850599 c
100.724 27.596701 l
99.847702 27.596701 l
99.847702 30.7939 l
99.847702 31.1663 99.800697 31.4396 99.7061 31.6133 c
99.5513 31.8911 99.2603 32.0303 98.834 32.0303 c
98.4804 32.030201 98.160301 31.9081 97.873001 31.665001 c
97.585701 31.4219 97.441399 30.962799 97.441399 30.2871 c
97.441399 27.596701 l
96.588898 27.596701 l
96.588898 34.578121 l
97.441399 34.578121 l
h
W
0 0 132 43 rc
95.588898 35.578121 m
101.724 35.578121 l
101.724 26.596701 l
95.588898 26.596701 l
h
f
Q
q
112.04 32.783199 m
112.722 32.783112 113.186 32.53643 113.433 32.0439 c
113.565 31.778799 113.631 31.4217 113.631 30.9736 c
113.631 27.596701 l
112.745 27.596701 l
112.745 31.121099 l
112.745 31.458799 112.66 31.691099 112.489 31.8174 c
112.322 31.943501 112.117 32.006802 111.874 32.006802 c
111.539 32.006802 111.25 31.8941 111.007 31.669901 c
110.767 31.4457 110.647 31.071699 110.647 30.547899 c
110.647 27.596701 l
109.78 27.596701 l
109.78 30.9072 l
109.78 31.2514 109.739 31.5033 109.657 31.6611 c
109.528 31.8978 109.286 32.015598 108.933 32.015598 c
108.611 32.015598 108.317 31.891001 108.052 31.6416 c
107.79 31.392099 107.658 30.940701 107.658 30.2871 c
107.658 27.596701 l
106.806 27.596701 l
106.806 32.669922 l
107.649 32.669922 l
107.649 31.9492 l
107.851 32.198502 108.034 32.380501 108.198 32.494099 c
108.479 32.686749 108.798 32.783199 109.155 32.783199 c
109.559 32.783199 109.885 32.684139 110.131 32.485401 c
110.27 32.3717 110.396 32.203499 110.51 31.982401 c
110.699 32.253899 110.922 32.454498 111.178 32.583981 c
111.433 32.716599 111.721 32.783199 112.04 32.783199 c
h
W
0 0 132 43 rc
105.806 33.783199 m
114.631 33.783199 l
114.631 26.596701 l
105.806 26.596701 l
h
f
Q
q
122.171 32.783199 m
122.891 32.783199 123.377 32.532261 123.63 32.0303 c
123.769 31.7556 123.839 31.362101 123.839 30.850599 c
123.839 27.596701 l
122.972 27.596701 l
122.972 30.7939 l
122.972 31.1033 122.925 31.3526 122.834 31.542 c
122.682 31.8577 122.408 32.015598 122.01 32.015598 c
121.808 32.015598 121.642 31.9951 121.513 31.9541 c
121.279 31.884701 121.074 31.746201 120.897 31.538099 c
120.755 31.3708 120.662 31.1966 120.618 31.0166 c
120.577 30.8398 120.556 30.5854 120.556 30.253901 c
120.556 27.596701 l
119.703 27.596701 l
119.703 32.669922 l
120.514 32.669922 l
120.514 31.9492 l
120.754 32.245998 121.008 32.4594 121.276 32.588871 c
121.545 32.718231 121.843 32.783199 122.171 32.783199 c
h
W
0 0 132 43 rc
118.703 33.783199 m
124.839 33.783199 l
124.839 26.596701 l
118.703 26.596701 l
h
f
ep
end
%%Trailer
%%EOF
