%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 15.3.2 (Build 24D81) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
116.893 42 m
124.901 42 131.39301 35.508129 131.39301 27.5 c
131.39301 1 l
15.8926 1 l
7.88445 1 1.392578 7.4919 1.392578 15.5 c
1.392578 42 l
116.893 42 l
h
W
0 0 132 43 rc
0.39257801 43 m
132.39301 43 l
132.39301 0 l
0.39257801 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1.392578 42 cm
115.50042 0 m
123.50842 0 130.00043 6.4918699 130.00043 14.5 c
130.00043 41 l
14.500022 41 l
6.4918718 41 0 34.508099 0 26.5 c
0 0 l
115.50042 0 l
h
S
Q
q
28.742201 18.342501 m
25.276199 15.5357 20.319201 15.5357 16.8531 18.342501 c
18.1933 19.9974 l
20.877899 17.8234 24.7174 17.8234 27.4021 19.9974 c
28.742201 18.342501 l
h
W
0 0 132 43 rc
15.8531 20.9974 m
29.742201 20.9974 l
29.742201 14.5357 l
15.8531 14.5357 l
h
f
Q
q
18.2966 21.986601 2.1294999 2.8769 rc
17.2966 25.863501 m
21.4261 25.863501 l
21.4261 20.986601 l
17.2966 20.986601 l
h
f
Q
q
24.9046 21.986601 2.1294999 2.8769 rc
23.9046 25.863501 m
28.0341 25.863501 l
28.0341 20.986601 l
23.9046 20.986601 l
h
f
Q
q
22.392599 9.5 m
28.7439 9.5 33.892601 14.6487 33.892601 21 c
33.892601 27.351299 28.7439 32.5 22.392599 32.5 c
16.0413 32.5 10.8926 27.351299 10.8926 21 c
10.8926 14.6487 16.0413 9.5 22.392599 9.5 c
h
22.392599 11.6295 m
27.567801 11.6295 31.7631 15.8248 31.7631 21 c
31.7631 26.1752 27.567801 30.370501 22.392599 30.370501 c
17.2174 30.370501 13.0221 26.1752 13.0221 21 c
13.0221 15.8248 17.2174 11.6295 22.392599 11.6295 c
h
W*
0 0 132 43 rc
9.8926001 33.5 m
34.892601 33.5 l
34.892601 8.5 l
9.8926001 8.5 l
h
f
Q
q
104.726 10.35 m
100.1572 23.2178 l
97.111198 23.2178 l
92.507301 10.35 l
95.325699 10.35 l
96.218498 12.9951 l
100.971 12.9951 l
101.803 10.35 l
104.726 10.35 l
h
98.608002 20.275801 m
100.2185 15.2125 l
96.944901 15.2125 l
98.608002 20.275801 l
h
W*
0 0 132 43 rc
91.507301 24.2178 m
105.726 24.2178 l
105.726 9.3500004 l
91.507301 9.3500004 l
h
f
Q
q
79.782898 18.721901 m
79.076897 19.624001 78.096603 20.075001 76.842003 20.075001 c
76.147598 20.075001 75.575798 19.929501 75.126404 19.6385 c
74.7472 19.405701 74.400002 19.068199 74.0849 18.6259 c
74.0849 23.2003 l
71.599098 23.2003 l
71.599098 10.35 l
74.0411 10.35 l
74.0411 11.546 l
74.373703 11.0804 74.682999 10.7545 74.968903 10.5682 c
75.447403 10.2539 76.080498 10.0968 76.868301 10.0968 c
78.122803 10.0968 79.100197 10.5828 79.8004 11.5547 c
80.500702 12.5266 80.8508 13.7517 80.8508 15.23 c
80.8508 16.6558 80.494797 17.819799 79.782898 18.721901 c
h
77.699799 12.9253 m
77.343803 12.4073 76.844902 12.1483 76.203003 12.1483 c
75.461998 12.1483 74.9105 12.416 74.548798 12.9515 c
74.186996 13.4869 74.006104 14.162 74.006104 14.9768 c
74.006104 15.6694 74.093597 16.2339 74.2687 16.670401 c
74.607101 17.490999 75.2286 17.9013 76.133003 17.9013 c
77.025803 17.9013 77.638496 17.4823 77.9711 16.644199 c
78.146202 16.2019 78.233704 15.6432 78.233704 14.9681 c
78.233704 14.1242 78.055702 13.4433 77.699799 12.9253 c
h
W*
0 0 132 43 rc
70.599098 24.2003 m
81.8508 24.2003 l
81.8508 9.0967999 l
70.599098 9.0967999 l
h
f
Q
q
63.609501 10.8301 m
63.329399 11.1153 63.189301 11.5547 63.189301 12.1483 c
63.189301 18.0061 l
61.858898 18.0061 l
61.858898 19.7782 l
63.189301 19.7782 l
63.189301 22.4321 l
65.6576 22.4321 l
65.6576 19.7782 l
67.206902 19.7782 l
67.206902 18.0061 l
65.6576 18.0061 l
65.6576 12.9777 l
65.6576 12.5877 65.707199 12.3433 65.806396 12.2444 c
65.905602 12.1512 66.209099 12.1047 66.716698 12.1047 c
66.953003 12.1047 l
67.040604 12.1105 67.125198 12.1163 67.206902 12.1221 c
67.206902 10.2627 l
66.0252 10.219 l
64.846497 10.1783 64.041298 10.382 63.609501 10.8301 c
h
W
0 0 132 43 rc
60.858898 23.4321 m
68.206902 23.4321 l
68.206902 9.1782999 l
60.858898 9.1782999 l
h
f
Q
q
60.554001 11.5023 m
61.359299 12.4975 61.761902 13.6935 61.761902 15.0903 c
61.761902 16.4638 61.359299 17.6539 60.554001 18.660801 c
59.748798 19.667601 58.526299 20.171101 56.8866 20.171101 c
55.246899 20.171101 54.024502 19.667601 53.2192 18.660801 c
52.413898 17.6539 52.011299 16.4638 52.011299 15.0903 c
52.011299 13.6935 52.413898 12.4975 53.2192 11.5023 c
54.024502 10.5129 55.246899 10.0182 56.8866 10.0182 c
58.526299 10.0182 59.748798 10.5129 60.554001 11.5023 c
h
58.558399 12.8816 m
58.1674 12.3637 57.6073 12.1047 56.877899 12.1047 c
56.148499 12.1047 55.5854 12.3637 55.188599 12.8816 c
54.7976 13.3996 54.6021 14.1358 54.6021 15.0903 c
54.6021 16.044701 54.7976 16.778099 55.188599 17.290199 c
55.5854 17.808201 56.148499 18.0672 56.877899 18.0672 c
57.6073 18.0672 58.1674 17.808201 58.558399 17.290199 c
58.949402 16.778099 59.144798 16.044701 59.144798 15.0903 c
59.144798 14.1358 58.949402 13.3996 58.558399 12.8816 c
h
W*
0 0 132 43 rc
51.011299 21.171101 m
62.761902 21.171101 l
62.761902 9.0181999 l
51.011299 9.0181999 l
h
f
Q
q
50.058701 19.3155 m
49.434399 19.8335 48.629101 20.092501 47.643002 20.092501 c
46.855202 20.092501 46.204601 19.9004 45.691101 19.5163 c
45.405201 19.301001 45.1017 18.9489 44.7808 18.459999 c
44.7808 19.848101 l
42.373798 19.848101 l
42.373798 10.35 l
44.8596 10.35 l
44.8596 15.5006 l
44.8596 16.0884 44.941299 16.5714 45.104698 16.949699 c
45.4198 17.6656 46.000401 18.0235 46.8465 18.0235 c
47.535 18.0235 48.001801 17.7791 48.246899 17.290199 c
48.3811 17.022499 48.4482 16.638399 48.4482 16.137899 c
48.4482 10.35 l
51.004002 10.35 l
51.004002 16.7577 l
51.004002 17.9508 50.6889 18.8034 50.058701 19.3155 c
h
W
0 0 132 43 rc
41.373798 21.092501 m
52.004002 21.092501 l
52.004002 9.3500004 l
41.373798 9.3500004 l
h
f
Q
q
82.313202 8.5254002 m
82.628304 8.5080004 l
82.873398 8.4962997 83.106796 8.5051003 83.328499 8.5341997 c
83.550301 8.5633001 83.737 8.6302004 83.888702 8.7349997 c
84.034599 8.8339005 84.1688 9.0404997 84.291298 9.3548002 c
84.419701 9.6689997 84.472198 9.8611002 84.448898 9.9308996 c
80.9478 19.865499 l
83.722397 19.865499 l
85.805603 12.8467 l
87.774902 19.865499 l
90.427002 19.865499 l
87.153503 10.5071 l
86.5233 8.7028999 86.024399 7.5854998 85.656799 7.1549001 c
85.289101 6.7184 84.553902 6.5001001 83.451103 6.5001001 c
83.229301 6.5001001 83.0513 6.5029998 82.917099 6.5088 c
82.782898 6.5088 82.581596 6.5176001 82.313202 6.5349998 c
82.313202 8.5254002 l
h
W
0 0 132 43 rc
79.9478 20.865499 m
91.427002 20.865499 l
91.427002 5.5001001 l
79.9478 5.5001001 l
h
f
Q
q
107.024 12.5358 m
107.024 21.028999 l
105.435 21.028999 l
105.435 23.2178 l
111.107 23.2178 l
111.107 21.028999 l
109.703 21.028999 l
109.703 12.5358 l
111.107 12.5358 l
111.107 10.347 l
105.435 10.347 l
105.435 12.5358 l
107.024 12.5358 l
h
W
0 0 132 43 rc
104.435 24.2178 m
112.107 24.2178 l
112.107 9.3470001 l
104.435 9.3470001 l
h
f
Q
q
83.411102 28.6621 m
84.832001 32.948238 l
85.809601 32.948238 l
85.684998 32.610611 85.408501 31.8407 84.9795 30.6387 c
84.658401 29.734301 84.389099 28.996901 84.172897 28.4268 c
83.661697 27.0833 83.301498 26.2637 83.091797 25.9688 c
82.882103 25.674 82.521698 25.5264 82.010696 25.5264 c
81.886299 25.5264 81.789497 25.5312 81.720703 25.541 c
81.655197 25.5508 81.572899 25.5695 81.474602 25.595699 c
81.474602 26.4014 l
81.628601 26.358801 81.740799 26.333099 81.809601 26.3232 c
81.878197 26.3134 81.938904 26.308599 81.991203 26.308599 c
82.1548 26.308599 82.2743 26.336 82.349602 26.3916 c
82.4282 26.444 82.494499 26.5093 82.546898 26.5879 c
82.563301 26.6141 82.622101 26.748699 82.723602 26.991199 c
82.825203 27.2337 82.898499 27.414301 82.944298 27.5322 c
80.998001 32.948238 l
82.000999 32.948238 l
83.411102 28.6621 l
h
W
0 0 132 43 rc
79.998001 33.948238 m
86.809601 33.948238 l
86.809601 24.5264 l
79.998001 24.5264 l
h
f
Q
q
119.871 33.085941 m
120.664 33.085941 121.236 32.852989 121.587 32.387699 c
121.806 32.092899 121.913 31.7752 121.906 31.434601 c
121.07 31.434601 l
121.054 31.634399 120.984 31.816601 120.859 31.980499 c
120.656 32.213001 120.304 32.329102 119.803 32.329102 c
119.469 32.329102 119.215 32.265301 119.041 32.137699 c
118.871 32.009899 118.785 31.840599 118.785 31.630899 c
118.785 31.401699 118.898 31.218599 119.124 31.0811 c
119.255 30.9991 119.449 30.9265 119.704 30.8643 c
120.289 30.721701 l
120.925 30.567699 121.351 30.4186 121.567 30.274401 c
121.911 30.0483 122.083 29.692801 122.083 29.208 c
122.083 28.739401 121.904 28.3349 121.547 27.994101 c
121.193 27.6535 120.653 27.4825 119.926 27.482401 c
119.143 27.482401 118.586 27.6598 118.259 28.0137 c
117.934 28.3708 117.761 28.811701 117.738 29.335899 c
118.589 29.335899 l
118.615 29.041 118.688 28.814501 118.81 28.6572 c
119.032 28.372299 119.419 28.2295 119.97 28.2295 c
120.297 28.2295 120.586 28.300501 120.835 28.441401 c
121.084 28.585501 121.208 28.806601 121.208 29.1045 c
121.208 29.330601 121.108 29.503099 120.908 29.621099 c
120.78 29.693199 120.528 29.7761 120.151 29.871099 c
119.448 30.0488 l
119 30.1602 118.669 30.284401 118.456 30.4219 c
118.076 30.6611 117.886 30.9923 117.886 31.415001 c
117.886 31.912901 118.064 32.316101 118.421 32.62402 c
118.781 32.932011 119.265 33.085941 119.871 33.085941 c
h
W
0 0 132 43 rc
116.738 34.085941 m
123.083 34.085941 l
123.083 26.482401 l
116.738 26.482401 l
h
f
Q
q
52.230499 33.06641 m
52.603901 33.06641 52.9659 32.97765 53.316399 32.800781 c
53.667 32.627151 53.9347 32.401501 54.118198 32.123001 c
54.295101 31.857599 54.412701 31.547199 54.471699 31.193399 c
54.523998 30.950899 54.5508 30.5646 54.5508 30.034201 c
50.692402 30.034201 l
50.708801 29.5002 50.834499 29.070499 51.070301 28.746099 c
51.306198 28.424999 51.672199 28.264601 52.167 28.264601 c
52.628899 28.2647 52.997299 28.417 53.272499 28.721701 c
53.429699 28.8986 53.540901 29.1033 53.6064 29.335899 c
54.476601 29.335899 l
54.453602 29.1427 54.376999 28.9265 54.246101 28.6875 c
54.118401 28.4517 53.9739 28.258101 53.813499 28.107401 c
53.5448 27.845301 53.211899 27.6679 52.815399 27.5762 c
52.602402 27.523701 52.3615 27.497999 52.0928 27.497999 c
51.437599 27.4981 50.882198 27.735001 50.4268 28.209999 c
49.971298 28.6884 49.743198 29.3573 49.743198 30.215799 c
49.743198 31.0611 49.9729 31.7479 50.431599 32.275398 c
50.890301 32.802792 51.490101 33.06641 52.230499 33.06641 c
h
52.1768 32.294899 m
51.7705 32.294899 51.429501 32.147301 51.154301 31.852501 c
50.879101 31.5609 50.7332 31.188499 50.716801 30.7363 c
53.641602 30.7363 l
53.605598 31.119499 53.521599 31.4259 53.390598 31.6553 c
53.148201 32.0812 52.7435 32.294899 52.1768 32.294899 c
h
W*
0 0 132 43 rc
48.743198 34.06641 m
55.5508 34.06641 l
55.5508 26.497999 l
48.743198 26.497999 l
h
f
Q
q
65.333 33.06641 m
65.706398 33.066341 66.068497 32.977661 66.4189 32.800781 c
66.769302 32.627201 67.036301 32.401402 67.219704 32.123001 c
67.396698 31.857599 67.515198 31.547199 67.574203 31.193399 c
67.626602 30.950899 67.652298 30.564501 67.652298 30.034201 c
63.7939 30.034201 l
63.810299 29.500099 63.936901 29.070499 64.172897 28.746099 c
64.408798 28.424999 64.773903 28.2647 65.2686 28.264601 c
65.730598 28.264601 66.0998 28.416901 66.375 28.721701 c
66.532097 28.8985 66.643501 29.103399 66.709 29.335899 c
67.579102 29.335899 l
67.556198 29.1427 67.4786 28.9266 67.347702 28.6875 c
67.219902 28.451599 67.0756 28.258101 66.915001 28.107401 c
66.6464 27.8454 66.314301 27.6679 65.917999 27.5762 c
65.705101 27.5238 65.463898 27.4981 65.195297 27.497999 c
64.540001 27.497999 63.983799 27.7348 63.528301 28.209999 c
63.072899 28.6884 62.845699 29.357401 62.845699 30.215799 c
62.845699 31.0611 63.074501 31.7479 63.533199 32.275398 c
63.991901 32.80294 64.592499 33.06641 65.333 33.06641 c
h
65.278297 32.294899 m
64.872101 32.294899 64.531097 32.1474 64.255898 31.852501 c
63.980701 31.5609 63.834702 31.188499 63.818401 30.7363 c
66.743202 30.7363 l
66.7071 31.1196 66.623199 31.4259 66.492203 31.6553 c
66.249702 32.0812 65.8452 32.294899 65.278297 32.294899 c
h
W*
0 0 132 43 rc
61.845699 34.06641 m
68.652298 34.06641 l
68.652298 26.497999 l
61.845699 26.497999 l
h
f
Q
q
72.732399 34.929691 m
72.732399 27.684601 l
71.936501 27.684601 l
71.936501 28.417 l
71.730103 28.0926 71.485901 27.858 71.204102 27.7139 c
70.922302 27.5697 70.599098 27.497999 70.235397 27.497999 c
69.649101 27.4981 69.140999 27.743099 68.711899 28.2344 c
68.2827 28.7292 68.068398 29.3869 68.068398 30.2061 c
68.068398 30.9727 68.263397 31.636 68.653297 32.196301 c
69.046501 32.75985 69.606598 33.041988 70.334 33.041988 c
70.737 33.041988 71.074699 32.95652 71.346703 32.786129 c
71.503799 32.68787 71.682198 32.515949 71.881798 32.2705 c
71.881798 34.929691 l
72.732399 34.929691 l
h
70.500999 32.2705 m
70.055397 32.2705 69.693497 32.099499 69.415001 31.758801 c
69.139801 31.417999 69.001999 30.9168 69.001999 30.2549 c
69.001999 29.691601 69.121399 29.219801 69.360397 28.8398 c
69.599503 28.459801 69.983299 28.2696 70.510696 28.269501 c
70.920303 28.269501 71.256401 28.444401 71.5186 28.794901 c
71.783897 29.148701 71.916901 29.6551 71.917 30.313499 c
71.917 30.9785 71.780602 31.4702 71.508797 31.788099 c
71.236801 32.1092 70.900703 32.2705 70.500999 32.2705 c
h
W*
0 0 132 43 rc
67.068398 35.929691 m
73.732399 35.929691 l
73.732399 26.497999 l
67.068398 26.497999 l
h
f
Q
q
57.404301 33.076172 m
58.023399 33.076172 58.526501 32.95853 58.913101 32.72266 c
59.296501 32.486698 59.4883 32.119202 59.4883 31.621099 c
59.4883 28.5889 l
59.4883 28.497101 59.505901 28.422899 59.542 28.367201 c
59.581402 28.3116 59.662102 28.284201 59.783199 28.284201 c
59.822399 28.284201 59.867001 28.285801 59.916 28.289101 c
59.965 28.295601 60.0177 28.303699 60.0732 28.313499 c
60.0732 27.6602 l
59.935902 27.620899 59.830898 27.5958 59.758801 27.585899 c
59.686798 27.576099 59.5882 27.571301 59.463902 27.571301 c
59.159199 27.571301 58.937401 27.6793 58.799801 27.8955 c
58.727798 28.010099 58.676998 28.1723 58.647499 28.3818 c
58.4673 28.146 58.208401 27.9412 57.871101 27.767599 c
57.5336 27.593901 57.161201 27.507799 56.754902 27.507799 c
56.2668 27.5079 55.866901 27.655399 55.555698 27.950199 c
55.247898 28.248301 55.0938 28.620001 55.0938 29.065399 c
55.0938 29.553699 55.245998 29.932501 55.5508 30.2012 c
55.855499 30.469801 56.255402 30.635 56.75 30.6973 c
58.161098 30.874001 l
58.364201 30.900299 58.5005 30.9858 58.569302 31.1299 c
58.608601 31.2085 58.627899 31.3216 58.627899 31.4688 c
58.627899 31.770201 58.52 31.988701 58.303699 32.123001 c
58.090801 32.260601 57.784302 32.328999 57.3848 32.329102 c
56.923 32.329102 56.5947 32.204899 56.401402 31.9561 c
56.293201 31.818399 56.223202 31.612801 56.190399 31.340799 c
55.3643 31.340799 l
55.3806 31.989401 55.590302 32.439999 55.993198 32.692379 c
56.399502 32.947971 56.870201 33.076172 57.404301 33.076172 c
h
58.6035 30.3633 m
58.495399 30.2945 58.3559 30.237301 58.185501 30.191401 c
58.015301 30.145599 57.848301 30.1124 57.684601 30.0928 c
57.148399 30.024401 l
56.827301 29.9818 56.5863 29.914 56.4258 29.8223 c
56.1539 29.668301 56.017601 29.4224 56.017601 29.084999 c
56.017601 28.8295 56.111198 28.627899 56.297901 28.480499 c
56.4846 28.333 56.706299 28.2598 56.961899 28.2598 c
57.273102 28.2598 57.574699 28.331499 57.866199 28.475599 c
58.357601 28.7148 58.6035 29.106501 58.6035 29.6504 c
58.6035 30.3633 l
h
W*
0 0 132 43 rc
54.0938 34.076172 m
61.0732 34.076172 l
61.0732 26.507799 l
54.0938 26.507799 l
h
f
Q
q
109.524 33.076172 m
110.144 33.076172 110.647 32.958488 111.033 32.72266 c
111.417 32.486698 111.608 32.119202 111.608 31.621099 c
111.608 28.5889 l
111.608 28.497101 111.626 28.422899 111.662 28.367201 c
111.701 28.311501 111.782 28.284201 111.903 28.284201 c
111.943 28.284201 111.987 28.285801 112.036 28.289101 c
112.085 28.295601 112.138 28.303699 112.193 28.313499 c
112.193 27.6602 l
112.056 27.620899 111.951 27.5958 111.879 27.585899 c
111.807 27.576099 111.708 27.571301 111.584 27.571301 c
111.279 27.571301 111.058 27.679199 110.92 27.8955 c
110.848 28.010099 110.797 28.1723 110.768 28.3818 c
110.587 28.146099 110.328 27.941099 109.991 27.767599 c
109.654 27.594 109.282 27.5079 108.876 27.507799 c
108.388 27.507799 107.988 27.6553 107.677 27.950199 c
107.369 28.2484 107.214 28.619801 107.214 29.065399 c
107.214 29.5536 107.366 29.932501 107.671 30.2012 c
107.976 30.4699 108.376 30.635 108.871 30.6973 c
110.281 30.874001 l
110.484 30.9002 110.621 30.985701 110.689 31.1299 c
110.729 31.2085 110.748 31.321501 110.748 31.4688 c
110.748 31.770201 110.64 31.988701 110.424 32.123001 c
110.211 32.260601 109.904 32.329102 109.505 32.329102 c
109.043 32.329102 108.715 32.205002 108.521 31.9561 c
108.413 31.818399 108.343 31.612801 108.311 31.340799 c
107.484 31.340799 l
107.501 31.9893 107.711 32.439999 108.113 32.692379 c
108.52 32.947971 108.99 33.076172 109.524 33.076172 c
h
110.724 30.3633 m
110.616 30.2945 110.476 30.237301 110.306 30.191401 c
110.135 30.145599 109.968 30.1124 109.805 30.0928 c
109.269 30.024401 l
108.948 29.9818 108.706 29.914 108.546 29.8223 c
108.274 29.6682 108.139 29.4223 108.139 29.084999 c
108.139 28.8295 108.232 28.627899 108.419 28.480499 c
108.606 28.3332 108.827 28.2598 109.082 28.2598 c
109.393 28.2598 109.695 28.3314 109.986 28.475599 c
110.478 28.7148 110.724 29.106501 110.724 29.6504 c
110.724 30.3633 l
h
W*
0 0 132 43 rc
106.214 34.076172 m
113.193 34.076172 l
113.193 26.507799 l
106.214 26.507799 l
h
f
Q
q
77.034203 32.309601 m
77.227402 32.56171 77.458 32.753738 77.726601 32.884769 c
77.995201 33.019081 78.287102 33.085911 78.601601 33.085941 c
79.256798 33.085941 79.788002 32.860249 80.194298 32.408199 c
80.603897 31.959299 80.808601 31.2952 80.808601 30.417 c
80.808601 29.584801 80.607101 28.8932 80.204102 28.3428 c
79.801102 27.7924 79.2425 27.517599 78.528297 27.517599 c
78.128601 27.517599 77.790901 27.6143 77.515602 27.8076 c
77.351799 27.9223 77.176003 28.1052 76.989304 28.357401 c
76.989304 27.684601 l
76.173798 27.684601 l
76.173798 34.929691 l
77.034203 34.929691 l
77.034203 32.309601 l
h
78.499001 32.294899 m
78.096001 32.294899 77.741302 32.145802 77.436501 31.8477 c
77.135101 31.5495 76.984398 31.057699 76.984398 30.372999 c
76.984398 29.8783 77.047401 29.4769 77.171898 29.1689 c
77.404503 28.5891 77.838097 28.298901 78.473602 28.2988 c
78.952003 28.2988 79.309998 28.489 79.545898 28.869101 c
79.784897 29.249201 79.904297 29.7507 79.904297 30.372999 c
79.904297 30.9266 79.785004 31.385401 79.545898 31.749001 c
79.310097 32.112598 78.9608 32.2948 78.499001 32.294899 c
h
W*
0 0 132 43 rc
75.173798 35.929691 m
81.808601 35.929691 l
81.808601 26.517599 l
75.173798 26.517599 l
h
f
Q
q
44.287102 33.10059 m
44.880199 33.10059 45.362202 32.956322 45.732399 32.667969 c
46.105801 32.379601 46.329899 31.882999 46.4053 31.178699 c
45.545898 31.178699 l
45.4935 31.503099 45.373299 31.7724 45.186501 31.985399 c
44.999699 32.2015 44.699799 32.309601 44.287102 32.309601 c
43.723499 32.309601 43.320599 32.033901 43.078098 31.4834 c
42.920898 31.126301 42.841801 30.685301 42.841801 30.1611 c
42.8419 29.633801 42.953999 29.1894 43.1768 28.8291 c
43.399601 28.469 43.750301 28.289101 44.2285 28.289101 c
44.595402 28.289101 44.8857 28.400299 45.098598 28.622999 c
45.3148 28.8491 45.464001 29.157101 45.545898 29.5469 c
46.4053 29.5469 l
46.3069 28.8491 46.0611 28.337999 45.667999 28.0137 c
45.274799 27.692699 44.771801 27.5322 44.159199 27.5322 c
43.471199 27.532301 42.922199 27.7829 42.512699 28.284201 c
42.103199 28.788799 41.898399 29.418301 41.898399 30.1719 c
41.898499 31.095699 42.123402 31.814699 42.5723 32.329102 c
43.021099 32.843391 43.592602 33.10059 44.287102 33.10059 c
h
W
0 0 132 43 rc
40.898399 34.10059 m
47.4053 34.10059 l
47.4053 26.5322 l
40.898399 26.5322 l
h
f
Q
q
94.959999 32.948238 m
94.959999 29.4541 l
94.959999 29.1854 95.002701 28.9653 95.087898 28.794901 c
95.245201 28.480499 95.538696 28.323299 95.967796 28.3232 c
96.583801 28.3232 97.0037 28.5989 97.226601 29.149401 c
97.347702 29.4443 97.408203 29.8491 97.408203 30.3633 c
97.408203 32.948238 l
98.292999 32.948238 l
98.292999 27.684601 l
97.457001 27.684601 l
97.466797 28.460899 l
97.352097 28.261101 97.209396 28.092699 97.039101 27.955099 c
96.701599 27.679899 96.292198 27.542 95.810501 27.542 c
95.060303 27.542 94.549301 27.792601 94.277298 28.2939 c
94.129898 28.562599 94.055702 28.921301 94.055702 29.3701 c
94.055702 32.948238 l
94.959999 32.948238 l
h
W
0 0 132 43 rc
93.055702 33.948238 m
99.292999 33.948238 l
99.292999 26.542 l
93.055702 26.542 l
h
f
Q
q
61.711899 34.417969 m
61.711899 32.948238 l
62.5527 32.948238 l
62.5527 32.225601 l
61.711899 32.225601 l
61.711899 28.790001 l
61.712002 28.606701 61.774899 28.4841 61.899399 28.4219 c
61.968201 28.3859 62.082699 28.367201 62.243198 28.367201 c
62.380901 28.367201 l
62.43 28.370501 62.487301 28.375299 62.5527 28.3818 c
62.5527 27.684601 l
62.451199 27.6551 62.344799 27.6332 62.233398 27.6201 c
62.125401 27.607 62.0075 27.600599 61.879902 27.600599 c
61.467201 27.600599 61.1866 27.7055 61.039101 27.915001 c
60.891602 28.128 60.817402 28.4037 60.817402 28.741199 c
60.817402 32.225601 l
60.105499 32.225601 l
60.105499 32.948238 l
60.817402 32.948238 l
60.817402 34.417969 l
61.711899 34.417969 l
h
W
0 0 132 43 rc
59.105499 35.417969 m
63.5527 35.417969 l
63.5527 26.600599 l
59.105499 26.600599 l
h
f
Q
q
49.288101 33.06641 m
49.304501 33.06641 49.332802 33.0648 49.372101 33.06152 c
49.411301 33.05825 49.478401 33.0518 49.5732 33.041988 c
49.5732 32.108398 l
49.521 32.118198 49.4715 32.124699 49.4258 32.127899 c
49.383301 32.131199 49.335499 32.132801 49.283199 32.132801 c
48.838001 32.132702 48.495899 31.988199 48.256802 31.700199 c
48.017601 31.4151 47.897499 31.085501 47.897499 30.711901 c
47.897499 27.684601 l
47.012699 27.684601 l
47.012699 32.948238 l
47.8535 32.948238 l
47.8535 32.039101 l
47.922298 32.2159 48.0909 32.430401 48.359402 32.682621 c
48.627899 32.93808 48.937698 33.066292 49.288101 33.06641 c
h
W
0 0 132 43 rc
46.012699 34.06641 m
50.5732 34.06641 l
50.5732 26.684601 l
46.012699 26.684601 l
h
f
Q
q
89.659203 32.235401 m
89.868896 32.500771 90.057503 32.687771 90.224602 32.795898 c
90.509697 32.982639 90.865097 33.076172 91.291 33.076172 c
92.054298 33.07616 92.571701 32.8092 92.843803 32.275398 c
92.991203 31.983801 93.065399 31.5783 93.065399 31.060499 c
93.065399 27.684601 l
92.156197 27.684601 l
92.156197 31.002001 l
92.156197 31.388599 92.107101 31.6723 92.008797 31.852501 c
91.848297 32.1408 91.5467 32.285099 91.1045 32.285198 c
90.737503 32.285198 90.404602 32.1586 90.1064 31.9062 c
89.808403 31.653999 89.659203 31.1775 89.659203 30.476601 c
89.659203 27.684601 l
88.774399 27.684601 l
88.774399 34.929691 l
89.659203 34.929691 l
89.659203 32.235401 l
h
W
0 0 132 43 rc
87.774399 35.929691 m
94.065399 35.929691 l
94.065399 26.684601 l
87.774399 26.684601 l
h
f
Q
q
104.808 33.06641 m
105.515 33.06641 105.997 32.810829 106.253 32.299801 c
106.391 32.024601 106.46 31.653799 106.46 31.188499 c
106.46 27.684601 l
105.54 27.684601 l
105.54 31.340799 l
105.54 31.6912 105.452 31.932301 105.275 32.063499 c
105.102 32.1945 104.888 32.2607 104.636 32.2607 c
104.289 32.2607 103.989 32.1437 103.736 31.9111 c
103.487 31.678499 103.363 31.2899 103.363 30.746099 c
103.363 27.684601 l
102.464 27.684601 l
102.464 31.1201 l
102.464 31.4771 102.421 31.737499 102.336 31.9014 c
102.202 32.147099 101.951 32.2705 101.584 32.2705 c
101.25 32.2705 100.945 32.140598 100.67 31.8818 c
100.398 31.622999 100.2618 31.1546 100.2617 30.476601 c
100.2617 27.684601 l
99.376999 27.684601 l
99.376999 32.948238 l
100.252 32.948238 l
100.252 32.201199 l
100.4617 32.459999 100.652 32.64864 100.822 32.766602 c
101.114 32.966309 101.444 33.066349 101.814 33.06641 c
102.234 33.06641 102.572 32.9632 102.827 32.75684 c
102.971 32.63887 103.103 32.464699 103.221 32.235401 c
103.417 32.51709 103.648 32.726002 103.913 32.860352 c
104.178 32.99791 104.477 33.066349 104.808 33.06641 c
h
W
0 0 132 43 rc
98.376999 34.06641 m
107.46 34.06641 l
107.46 26.684601 l
98.376999 26.684601 l
h
f
Q
q
115.322 33.06641 m
116.069 33.066349 116.574 32.805969 116.836 32.285198 c
116.98 32.000099 117.052 31.5914 117.052 31.060499 c
117.052 27.684601 l
116.152 27.684601 l
116.152 31.002001 l
116.152 31.323 116.105 31.581699 116.01 31.778299 c
115.853 32.1059 115.568 32.270401 115.155 32.2705 c
114.946 32.2705 114.773 32.248699 114.639 32.2061 c
114.396 32.1339 114.183 31.989599 114 31.773399 c
113.853 31.599899 113.756 31.42 113.71 31.2334 c
113.667 31.0499 113.646 30.7855 113.646 30.441401 c
113.646 27.684601 l
112.762 27.684601 l
112.762 32.948238 l
113.602 32.948238 l
113.602 32.201199 l
113.851 32.509178 114.115 32.730888 114.394 32.865231 c
114.672 32.999409 114.982 33.06641 115.322 33.06641 c
h
W
0 0 132 43 rc
111.762 34.06641 m
118.052 34.06641 l
118.052 26.684601 l
111.762 26.684601 l
h
f
ep
end
%%Trailer
%%EOF
