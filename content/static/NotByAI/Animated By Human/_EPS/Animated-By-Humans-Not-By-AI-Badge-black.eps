%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 15.3.2 (Build 24D81) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
116.5 42 m
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
116.5 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
115.5 0 m
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
115.5 0 l
h
S
Q
1 1 1 sc
q
29.349701 18.342501 m
25.8836 15.5357 20.9266 15.5357 17.460501 18.342501 c
18.800699 19.9974 l
21.485399 17.8234 25.3248 17.8234 28.009501 19.9974 c
29.349701 18.342501 l
h
W
0 0 132 43 rc
16.460501 20.9974 m
30.349701 20.9974 l
30.349701 14.5357 l
16.460501 14.5357 l
h
f
Q
q
18.903999 21.986601 2.1296 2.8769 rc
17.903999 25.863501 m
22.0336 25.863501 l
22.0336 20.986601 l
17.903999 20.986601 l
h
f
Q
q
25.511999 21.986601 2.1294999 2.8769 rc
24.511999 25.863501 m
28.6415 25.863501 l
28.6415 20.986601 l
24.511999 20.986601 l
h
f
Q
q
23 9.5 m
29.351299 9.5 34.5 14.6487 34.5 21 c
34.5 27.351299 29.351299 32.5 23 32.5 c
16.648701 32.5 11.5 27.351299 11.5 21 c
11.5 14.6487 16.648701 9.5 23 9.5 c
h
23 11.6295 m
28.1752 11.6295 32.370499 15.8248 32.370499 21 c
32.370499 26.1752 28.1752 30.370501 23 30.370501 c
17.8248 30.370501 13.6295 26.1752 13.6295 21 c
13.6295 15.8248 17.8248 11.6295 23 11.6295 c
h
W*
0 0 132 43 rc
10.5 33.5 m
35.5 33.5 l
35.5 8.5 l
10.5 8.5 l
h
f
Q
q
90.623001 10.35 m
95.260498 23.2178 l
98.328598 23.2178 l
102.931 10.35 l
99.986099 10.35 l
99.148598 12.9951 l
94.361198 12.9951 l
93.461899 10.35 l
90.623001 10.35 l
h
96.768097 20.275801 m
95.093002 15.2125 l
98.390297 15.2125 l
96.768097 20.275801 l
h
W*
0 0 132 43 rc
89.623001 24.2178 m
103.931 24.2178 l
103.931 9.3500004 l
89.623001 9.3500004 l
h
f
Q
q
77.806 18.721901 m
77.094803 19.624001 76.107399 20.075001 74.843697 20.075001 c
74.144203 20.075001 73.568199 19.929501 73.115601 19.6385 c
72.733597 19.405701 72.383904 19.068199 72.066498 18.6259 c
72.066498 23.2003 l
69.562599 23.2003 l
69.562599 10.35 l
72.0224 10.35 l
72.0224 11.546 l
72.357399 11.0804 72.6689 10.7545 72.956902 10.5682 c
73.438904 10.2539 74.076599 10.0968 74.870102 10.0968 c
76.133797 10.0968 77.118301 10.5828 77.823601 11.5547 c
78.528999 12.5266 78.881599 13.7517 78.881599 15.23 c
78.881599 16.6558 78.523102 17.819799 77.806 18.721901 c
h
75.707703 12.9253 m
75.349098 12.4073 74.846603 12.1483 74.200104 12.1483 c
73.453598 12.1483 72.898102 12.416 72.533699 12.9515 c
72.169296 13.4869 71.987099 14.162 71.987099 14.9768 c
71.987099 15.6694 72.075302 16.2339 72.251602 16.670401 c
72.592499 17.490999 73.218498 17.9013 74.129501 17.9013 c
75.028801 17.9013 75.646004 17.4823 75.981003 16.644199 c
76.157303 16.2019 76.245499 15.6432 76.245499 14.9681 c
76.245499 14.1242 76.0662 13.4433 75.707703 12.9253 c
h
W*
0 0 132 43 rc
68.562599 24.2003 m
79.881599 24.2003 l
79.881599 9.0967999 l
68.562599 9.0967999 l
h
f
Q
q
63.727699 12.2444 m
63.6278 12.3433 63.5779 12.5877 63.5779 12.9777 c
63.5779 18.0061 l
65.138397 18.0061 l
65.138397 19.7782 l
63.5779 19.7782 l
63.5779 22.4321 l
61.091599 22.4321 l
61.091599 19.7782 l
59.751499 19.7782 l
59.751499 18.0061 l
61.091599 18.0061 l
61.091599 12.1483 l
61.091599 11.5547 61.2327 11.1153 61.514801 10.8301 c
61.949699 10.382 62.760899 10.1783 63.9482 10.219 c
65.138397 10.2627 l
65.138397 12.1221 l
65.056099 12.1163 64.970901 12.1105 64.882698 12.1047 c
64.644699 12.1047 l
64.133301 12.1047 63.827702 12.1512 63.727699 12.2444 c
h
W
0 0 132 43 rc
58.751499 23.4321 m
66.138397 23.4321 l
66.138397 9.1782999 l
58.751499 9.1782999 l
h
f
Q
q
58.437099 11.5023 m
59.248299 12.4975 59.653801 13.6935 59.653801 15.0903 c
59.653801 16.4638 59.248299 17.6539 58.437099 18.660801 c
57.625999 19.667601 56.3946 20.171101 54.743 20.171101 c
53.0914 20.171101 51.860001 19.667601 51.048901 18.660801 c
50.237801 17.6539 49.832199 16.4638 49.832199 15.0903 c
49.832199 13.6935 50.237801 12.4975 51.048901 11.5023 c
51.860001 10.5129 53.0914 10.0182 54.743 10.0182 c
56.3946 10.0182 57.625999 10.5129 58.437099 11.5023 c
h
56.426998 12.8816 m
56.033199 12.3637 55.468899 12.1047 54.7342 12.1047 c
53.9995 12.1047 53.432301 12.3637 53.0326 12.8816 c
52.638802 13.3996 52.441898 14.1358 52.441898 15.0903 c
52.441898 16.044701 52.638802 16.778099 53.0326 17.290199 c
53.432301 17.808201 53.9995 18.0672 54.7342 18.0672 c
55.468899 18.0672 56.033199 17.808201 56.426998 17.290199 c
56.820801 16.778099 57.0177 16.044701 57.0177 15.0903 c
57.0177 14.1358 56.820801 13.3996 56.426998 12.8816 c
h
W*
0 0 132 43 rc
48.832199 21.171101 m
60.653801 21.171101 l
60.653801 9.0181999 l
48.832199 9.0181999 l
h
f
Q
q
45.432098 20.092501 m
46.4254 20.092501 47.2365 19.8335 47.865398 19.3155 c
48.500198 18.8034 48.8176 17.9508 48.8176 16.7577 c
48.8176 10.35 l
46.243198 10.35 l
46.243198 16.137899 l
46.243198 16.638399 46.175598 17.022499 46.040401 17.290199 c
45.793499 17.7791 45.323299 18.0235 44.629799 18.0235 c
43.7775 18.0235 43.192699 17.6656 42.875301 16.949699 c
42.710701 16.5714 42.628399 16.0884 42.628399 15.5006 c
42.628399 10.35 l
40.1245 10.35 l
40.1245 19.848101 l
42.549099 19.848101 l
42.549099 18.459999 l
42.872299 18.9489 43.178001 19.301001 43.466 19.5163 c
43.9832 19.9004 44.638599 20.092501 45.432098 20.092501 c
h
W
0 0 132 43 rc
39.1245 21.092501 m
49.8176 21.092501 l
49.8176 9.3500004 l
39.1245 9.3500004 l
h
f
Q
q
80.354698 8.5254002 m
80.672096 8.5080004 l
80.9189 8.4962997 81.154099 8.5051003 81.377403 8.5341997 c
81.6008 8.5633001 81.788803 8.6302004 81.941704 8.7349997 c
82.0886 8.8339005 82.223801 9.0404997 82.347198 9.3548002 c
82.476501 9.6689997 82.529404 9.8611002 82.505898 9.9308996 c
78.979301 19.865499 l
81.774101 19.865499 l
83.872498 12.8467 l
85.856201 19.865499 l
88.527603 19.865499 l
85.230202 10.5071 l
84.595398 8.7028999 84.092903 7.5854998 83.722603 7.1549001 c
83.352303 6.7184 82.611702 6.5001001 81.500801 6.5001001 c
81.277496 6.5001001 81.098198 6.5029998 80.962997 6.5088 c
80.827797 6.5088 80.625099 6.5176001 80.354698 6.5349998 c
80.354698 8.5254002 l
h
W
0 0 132 43 rc
77.979301 20.865499 m
89.527603 20.865499 l
89.527603 5.5001001 l
77.979301 5.5001001 l
h
f
Q
q
105.246 12.5358 m
105.246 21.028999 l
103.645 21.028999 l
103.645 23.2178 l
109.358 23.2178 l
109.358 21.028999 l
107.944 21.028999 l
107.944 12.5358 l
109.358 12.5358 l
109.358 10.347 l
103.645 10.347 l
103.645 12.5358 l
105.246 12.5358 l
h
W
0 0 132 43 rc
102.645 24.2178 m
110.358 24.2178 l
110.358 9.3470001 l
102.645 9.3470001 l
h
f
Q
q
86.484398 28.607401 m
87.825203 32.65234 l
88.748001 32.65234 l
88.630501 32.333801 88.369003 31.6066 87.963898 30.471701 c
87.660896 29.618401 87.407204 28.9228 87.203102 28.3848 c
86.720703 27.116899 86.380501 26.3437 86.182602 26.065399 c
85.984703 25.787201 85.644501 25.647499 85.162102 25.647499 c
85.044701 25.647499 84.953598 25.6528 84.888702 25.6621 c
84.826797 25.6714 84.749001 25.6882 84.656197 25.7129 c
84.656197 26.4736 l
84.8013 26.4335 84.9067 26.408701 84.971703 26.399401 c
85.036598 26.3901 85.094101 26.385799 85.1436 26.3857 c
85.298103 26.3857 85.411301 26.4114 85.482399 26.4639 c
85.556503 26.5133 85.6185 26.5753 85.667999 26.649401 c
85.683403 26.6742 85.739098 26.801399 85.834999 27.0303 c
85.930702 27.2589 86.000603 27.428699 86.0439 27.540001 c
84.207001 32.65234 l
85.153297 32.65234 l
86.484398 28.607401 l
h
W
0 0 132 43 rc
83.207001 33.65234 m
89.748001 33.65234 l
89.748001 24.647499 l
83.207001 24.647499 l
h
f
Q
q
121.559 32.78223 m
122.307 32.78223 122.847 32.562168 123.178 32.123001 c
123.385 31.8449 123.485 31.545099 123.479 31.2236 c
122.69 31.2236 l
122.675 31.412201 122.609 31.5837 122.491 31.7383 c
122.299 31.9578 121.966 32.067402 121.493 32.067402 c
121.178 32.067299 120.938 32.007301 120.774 31.8867 c
120.614 31.7661 120.533 31.607 120.533 31.409201 c
120.533 31.192699 120.64 31.019501 120.854 30.889601 c
120.977 30.812401 121.159 30.744301 121.4 30.685499 c
121.953 30.5508 l
122.553 30.4055 122.955 30.264999 123.159 30.128901 c
123.484 29.915501 123.646 29.5797 123.646 29.122101 c
123.645 28.68 123.478 28.2981 123.141 27.976601 c
122.807 27.6549 122.296 27.494101 121.609 27.494101 c
120.87 27.4942 120.346 27.6612 120.037 27.9951 c
119.731 28.332199 119.567 28.7484 119.545 29.2432 c
120.348 29.2432 l
120.372 28.9648 120.442 28.750999 120.557 28.602501 c
120.767 28.333599 121.132 28.1992 121.651 28.1992 c
121.961 28.1992 122.233 28.265499 122.468 28.398399 c
122.703 28.534401 122.82 28.7432 122.82 29.024401 c
122.82 29.237801 122.726 29.4004 122.537 29.5117 c
122.417 29.5797 122.179 29.6584 121.823 29.747999 c
121.159 29.915001 l
120.736 30.0201 120.424 30.1378 120.223 30.267599 c
119.864 30.493299 119.685 30.8062 119.685 31.205099 c
119.685 31.6751 119.853 32.055 120.19 32.345699 c
120.531 32.636391 120.986 32.78223 121.559 32.78223 c
h
W
0 0 132 43 rc
118.545 33.78223 m
124.646 33.78223 l
124.646 26.494101 l
118.545 26.494101 l
h
f
Q
q
69.042 32.763672 m
69.394501 32.763672 69.736504 32.679691 70.067398 32.512699 c
70.398102 32.348801 70.650101 32.135799 70.823196 31.872999 c
70.990196 31.622601 71.101601 31.330099 71.157204 30.996099 c
71.206703 30.7672 71.2314 30.402201 71.2314 29.9014 c
67.589798 29.9014 l
67.605301 29.397499 67.724701 28.992599 67.947304 28.686501 c
68.169899 28.383499 68.514702 28.231501 68.9814 28.2314 c
69.417397 28.2314 69.765602 28.3755 70.025398 28.663099 c
70.173798 28.830099 70.278999 29.0236 70.340797 29.2432 c
71.162102 29.2432 l
71.140503 29.060801 71.067902 28.856501 70.944298 28.630899 c
70.8237 28.408199 70.687599 28.2253 70.536102 28.083 c
70.2826 27.8356 69.967903 27.6686 69.593803 27.582001 c
69.392799 27.5326 69.165497 27.507799 68.912102 27.507799 c
68.293701 27.507799 67.769699 27.7323 67.339798 28.1807 c
66.910004 28.6322 66.695297 29.263 66.695297 30.0732 c
66.695297 30.871099 66.911797 31.5187 67.344704 32.016602 c
67.777603 32.514431 68.343201 32.763672 69.042 32.763672 c
h
68.991203 32.035198 m
68.607803 32.035198 68.286102 31.8964 68.026398 31.6182 c
67.766602 31.342899 67.6287 30.991199 67.613297 30.564501 c
70.373001 30.564501 l
70.338997 30.9263 70.260399 31.216101 70.136703 31.4326 c
69.907898 31.8344 69.526001 32.035099 68.991203 32.035198 c
h
W*
0 0 132 43 rc
65.695297 33.763672 m
72.2314 33.763672 l
72.2314 26.507799 l
65.695297 26.507799 l
h
f
Q
q
76.121101 34.521481 m
76.121101 27.684601 l
75.369102 27.684601 l
75.369102 28.375 l
75.1744 28.069201 74.944397 27.8479 74.678703 27.711901 c
74.412804 27.575899 74.107803 27.507799 73.764603 27.507799 c
73.211098 27.507799 72.7313 27.7402 72.326202 28.2041 c
71.921303 28.6709 71.718803 29.2908 71.718803 30.063499 c
71.718803 30.787001 71.902702 31.413601 72.2705 31.9424 c
72.641602 32.4743 73.170898 32.740231 73.857399 32.740231 c
74.237701 32.740211 74.555901 32.65976 74.8125 32.499001 c
74.960899 32.4062 75.1297 32.243698 75.318398 32.0117 c
75.318398 34.521481 l
76.121101 34.521481 l
h
74.014603 32.0117 m
73.5942 32.0116 73.252998 31.8508 72.990196 31.529301 c
72.730499 31.207701 72.600601 30.735001 72.600601 30.110399 c
72.600601 29.578501 72.712799 29.133101 72.938499 28.774401 c
73.1642 28.415701 73.526497 28.2363 74.024399 28.2363 c
74.410896 28.236401 74.728203 28.4016 74.975601 28.732401 c
75.226097 29.066401 75.350601 29.5445 75.350601 30.166 c
75.350601 30.7938 75.222504 31.257601 74.965797 31.5576 c
74.709198 31.860701 74.391899 32.0117 74.014603 32.0117 c
h
W*
0 0 132 43 rc
70.718803 35.521481 m
77.121101 35.521481 l
77.121101 26.507799 l
70.718803 26.507799 l
h
f
Q
q
41.524399 32.772461 m
42.108898 32.772461 42.583302 32.661129 42.9482 32.438499 c
43.310001 32.215801 43.491199 31.8694 43.491199 31.399401 c
43.491199 28.538099 l
43.491199 28.451599 43.507999 28.381701 43.542 28.3291 c
43.579102 28.276501 43.655102 28.25 43.769501 28.25 c
43.806599 28.25 43.848202 28.251801 43.894501 28.2549 c
43.940899 28.261101 43.990501 28.2691 44.042999 28.278299 c
44.042999 27.6611 l
43.9132 27.6241 43.814098 27.601101 43.746101 27.591801 c
43.678101 27.5825 43.585201 27.577101 43.4678 27.577101 c
43.180302 27.5772 42.9716 27.679701 42.841801 27.883801 c
42.7738 27.992001 42.726101 28.145 42.6982 28.3428 c
42.528198 28.1201 42.283298 27.9266 41.964802 27.762699 c
41.6464 27.5989 41.295399 27.517599 40.912102 27.517599 c
40.451401 27.517599 40.074001 27.6563 39.7803 27.934601 c
39.4897 28.2159 39.343899 28.5669 39.3438 28.987301 c
39.3438 29.448099 39.487801 29.806 39.775398 30.059601 c
40.062901 30.313101 40.440399 30.468599 40.9072 30.5273 c
42.2393 30.6943 l
42.430599 30.719101 42.559101 30.799801 42.624001 30.935499 c
42.661098 31.009701 42.679699 31.1168 42.679699 31.255899 c
42.679699 31.5404 42.577099 31.7463 42.373001 31.872999 c
42.172001 32.002899 41.882999 32.067402 41.505901 32.067402 c
41.069801 32.067402 40.760601 31.9499 40.578098 31.7148 c
40.4762 31.584999 40.409801 31.392099 40.378899 31.1357 c
39.599602 31.1357 l
39.615101 31.7479 39.813 32.173 40.193401 32.411098 c
40.576801 32.652271 41.020401 32.772461 41.524399 32.772461 c
h
42.6562 30.211901 m
42.554199 30.146999 42.422401 30.0931 42.2617 30.049801 c
42.101101 30.006599 41.943501 29.975599 41.789101 29.957001 c
41.283199 29.892599 l
40.980301 29.8524 40.753101 29.7887 40.601601 29.702101 c
40.344898 29.556801 40.216801 29.3244 40.216801 29.005899 c
40.2169 28.7649 40.304298 28.5746 40.480499 28.435499 c
40.6567 28.2964 40.866199 28.226601 41.107399 28.226601 c
41.401001 28.226601 41.685902 28.294701 41.960899 28.4307 c
42.424702 28.656401 42.6562 29.0268 42.6562 29.540001 c
42.6562 30.211901 l
h
W*
0 0 132 43 rc
38.3438 33.772461 m
45.042999 33.772461 l
45.042999 26.517599 l
38.3438 26.517599 l
h
f
Q
q
61.369099 32.772461 m
61.953602 32.772461 62.429001 32.661129 62.7939 32.438499 c
63.155399 32.215801 63.335899 31.8692 63.335899 31.399401 c
63.335899 28.538099 l
63.335899 28.4515 63.353699 28.381701 63.387699 28.3291 c
63.424801 28.276699 63.500099 28.25 63.6143 28.25 c
63.651402 28.25 63.693802 28.251801 63.7402 28.2549 c
63.786499 28.261101 63.8363 28.2691 63.888699 28.278299 c
63.888699 27.6611 l
63.759102 27.6241 63.659801 27.601101 63.591801 27.591801 c
63.523899 27.5825 63.430801 27.5772 63.313499 27.577101 c
63.025902 27.577101 62.816399 27.679701 62.686501 27.883801 c
62.618599 27.992001 62.570801 28.145 62.542999 28.3428 c
62.372898 28.120199 62.128899 27.9265 61.810501 27.762699 c
61.492001 27.598801 61.140301 27.517599 60.756802 27.517599 c
60.2962 27.517599 59.918701 27.6563 59.625 27.934601 c
59.3344 28.2159 59.189602 28.566999 59.189499 28.987301 c
59.189499 29.448099 59.3335 29.806 59.621101 30.059601 c
59.9086 30.312901 60.286201 30.468599 60.752899 30.5273 c
62.084 30.6943 l
62.275398 30.719101 62.403801 30.799801 62.4688 30.935499 c
62.505798 31.009701 62.524399 31.1168 62.524399 31.255899 c
62.524399 31.540199 62.4226 31.746201 62.2188 31.872999 c
62.0177 32.002899 61.727901 32.067402 61.350601 32.067402 c
60.9147 32.067299 60.605301 31.9498 60.422901 31.7148 c
60.320999 31.584999 60.254501 31.392 60.223598 31.1357 c
59.444302 31.1357 l
59.459801 31.7479 59.657799 32.173 60.038101 32.411098 c
60.421501 32.652302 60.8652 32.772461 61.369099 32.772461 c
h
62.500999 30.211901 m
62.399101 30.1471 62.267799 30.093 62.107399 30.049801 c
61.946602 30.0065 61.788399 29.975599 61.633801 29.957001 c
61.127899 29.892599 l
60.825001 29.8524 60.597801 29.7887 60.446301 29.702101 c
60.189602 29.556801 60.061501 29.3244 60.061501 29.005899 c
60.0616 28.7649 60.150002 28.5746 60.326199 28.435499 c
60.502399 28.2966 60.711102 28.226601 60.952099 28.226601 c
61.2458 28.226601 61.530499 28.2946 61.805698 28.4307 c
62.269501 28.656401 62.500999 29.026699 62.500999 29.540001 c
62.500999 30.211901 l
h
W*
0 0 132 43 rc
58.189499 33.772461 m
64.888702 33.772461 l
64.888702 26.517599 l
58.189499 26.517599 l
h
f
Q
q
111.604 32.772461 m
112.188 32.772461 112.662 32.661121 113.027 32.438499 c
113.389 32.215801 113.57 31.869499 113.57 31.399401 c
113.57 28.538099 l
113.57 28.451599 113.587 28.381701 113.621 28.3291 c
113.658 28.276501 113.734 28.25 113.849 28.25 c
113.886 28.25 113.927 28.251801 113.974 28.2549 c
114.02 28.261101 114.07 28.2691 114.122 28.278299 c
114.122 27.6611 l
113.992 27.6241 113.893 27.601101 113.825 27.591801 c
113.757 27.5825 113.664 27.577101 113.547 27.577101 c
113.259 27.5772 113.051 27.6798 112.921 27.883801 c
112.853 27.992001 112.805 28.145 112.777 28.3428 c
112.607 28.120199 112.362 27.9266 112.044 27.762699 c
111.726 27.599001 111.374 27.517599 110.991 27.517599 c
110.531 27.517599 110.153 27.6563 109.859 27.934601 c
109.569 28.2159 109.424 28.5669 109.424 28.987301 c
109.424 29.448 109.567 29.806 109.854 30.059601 c
110.142 30.313101 110.52 30.4685 110.986 30.5273 c
112.318 30.6943 l
112.51 30.719101 112.638 30.799801 112.703 30.935499 c
112.74 31.009701 112.759 31.1168 112.759 31.255899 c
112.759 31.5404 112.656 31.7463 112.452 31.872999 c
112.251 32.0028 111.962 32.067402 111.585 32.067402 c
111.149 32.067402 110.84 31.9499 110.657 31.7148 c
110.555 31.584999 110.489 31.392099 110.458 31.1357 c
109.679 31.1357 l
109.694 31.7479 109.892 32.173 110.272 32.411098 c
110.656 32.652279 111.1 32.772461 111.604 32.772461 c
h
112.735 30.211901 m
112.633 30.1471 112.501 30.0931 112.341 30.049801 c
112.18 30.006599 112.023 29.975599 111.868 29.957001 c
111.362 29.892599 l
111.059 29.8524 110.832 29.7887 110.681 29.702101 c
110.424 29.556801 110.296 29.3244 110.296 29.005899 c
110.296 28.7649 110.383 28.5746 110.56 28.435499 c
110.736 28.2964 110.945 28.226601 111.187 28.226601 c
111.48 28.226601 111.765 28.294701 112.04 28.4307 c
112.504 28.656401 112.735 29.026699 112.735 29.540001 c
112.735 30.211901 l
h
W*
0 0 132 43 rc
108.424 33.772461 m
115.122 33.772461 l
115.122 26.517599 l
108.424 26.517599 l
h
f
Q
q
80.370102 32.048801 m
80.552597 32.2869 80.770897 32.468102 81.024399 32.591801 c
81.277901 32.718521 81.552902 32.782162 81.849602 32.78223 c
82.468102 32.78223 82.969101 32.568359 83.352501 32.141602 c
83.738998 31.718 83.932602 31.0923 83.932602 30.2637 c
83.932602 29.478201 83.742699 28.825199 83.362297 28.3057 c
82.981903 27.7862 82.454399 27.5264 81.780296 27.5264 c
81.403297 27.5264 81.084801 27.617599 80.825203 27.799801 c
80.670601 27.908001 80.504402 28.081301 80.328102 28.3193 c
80.328102 27.684601 l
79.558601 27.684601 l
79.558601 34.521481 l
80.370102 34.521481 l
80.370102 32.048801 l
h
81.752899 32.035198 m
81.372597 32.035198 81.038498 31.8946 80.750999 31.6133 c
80.466499 31.3319 80.324203 30.868 80.324203 30.221701 c
80.324203 29.7547 80.3825 29.3757 80.5 29.084999 c
80.719597 28.537701 81.129601 28.2637 81.7295 28.2637 c
82.180702 28.2637 82.517601 28.443399 82.740196 28.8018 c
82.966003 29.1605 83.079102 29.6341 83.079102 30.221701 c
83.079102 30.744301 82.966003 31.1772 82.740196 31.5205 c
82.517601 31.8636 82.188698 32.035099 81.752899 32.035198 c
h
W*
0 0 132 43 rc
78.558601 35.521481 m
84.932602 35.521481 l
84.932602 26.5264 l
78.558601 26.5264 l
h
f
Q
q
97.6689 32.65234 m
97.6689 29.3545 l
97.6689 29.100901 97.708702 28.8932 97.789101 28.732401 c
97.9375 28.435699 98.214302 28.287201 98.619102 28.2871 c
99.200401 28.2871 99.596298 28.5471 99.806602 29.066401 c
99.920998 29.344601 99.9785 29.726601 99.9785 30.211901 c
99.9785 32.65234 l
100.813 32.65234 l
100.813 27.684601 l
100.0254 27.684601 l
100.0342 28.417 l
99.926003 28.2285 99.791603 28.0693 99.630898 27.939501 c
99.312302 27.679701 98.925301 27.549801 98.470703 27.549801 c
97.762802 27.5499 97.280098 27.786699 97.023399 28.2598 c
96.884399 28.5133 96.815399 28.8519 96.815399 29.2754 c
96.815399 32.65234 l
97.6689 32.65234 l
h
W
0 0 132 43 rc
95.815399 33.65234 m
101.813 33.65234 l
101.813 26.549801 l
95.815399 26.549801 l
h
f
Q
q
65.530296 32.65234 m
66.323196 32.65234 l
66.323196 31.970699 l
65.530296 31.970699 l
65.530296 28.727501 l
65.530403 28.5546 65.5896 28.438601 65.707001 28.3799 c
65.772003 28.346001 65.880096 28.3291 66.031197 28.3291 c
66.161102 28.3291 l
66.207397 28.332199 66.261597 28.336599 66.323196 28.3428 c
66.323196 27.684601 l
66.2276 27.656799 66.127403 27.6364 66.022499 27.624001 c
65.920502 27.6117 65.808998 27.605499 65.688499 27.605499 c
65.298798 27.605499 65.033699 27.704399 64.894501 27.9023 c
64.755501 28.1033 64.686501 28.363199 64.686501 28.681601 c
64.686501 31.970699 l
64.013702 31.970699 l
64.013702 32.65234 l
64.686501 32.65234 l
64.686501 34.039059 l
65.530296 34.039059 l
65.530296 32.65234 l
h
W
0 0 132 43 rc
63.013699 35.039059 m
67.323196 35.039059 l
67.323196 26.605499 l
63.013699 26.605499 l
h
f
Q
q
47.090801 32.763672 m
47.795799 32.763672 48.272099 32.517891 48.519501 32.026402 c
48.655602 31.757299 48.723598 31.372101 48.723598 30.871099 c
48.723598 27.684601 l
47.875 27.684601 l
47.875 30.815399 l
47.875 31.118299 47.8298 31.362301 47.7402 31.547899 c
47.591801 31.857 47.323101 32.0116 46.933601 32.0117 c
46.735699 32.0117 46.573101 31.9923 46.446301 31.952101 c
46.2174 31.8841 46.015999 31.747999 45.8428 31.5439 c
45.703602 31.3801 45.612598 31.2094 45.569302 31.033199 c
45.529202 30.860001 45.508801 30.610701 45.508801 30.2861 c
45.508801 27.684601 l
44.673801 27.684601 l
44.673801 32.65234 l
45.4678 32.65234 l
45.4678 31.9473 l
45.702599 32.237701 45.951199 32.446499 46.213902 32.573238 c
46.4767 32.700008 46.769299 32.763672 47.090801 32.763672 c
h
W
0 0 132 43 rc
43.673801 33.763672 m
49.723598 33.763672 l
49.723598 26.684601 l
43.673801 26.684601 l
h
f
Q
q
49.772499 27.684601 0.84859997 4.9443102 rc
48.772499 33.62891 m
51.621101 33.62891 l
51.621101 26.684601 l
48.772499 26.684601 l
h
f
Q
q
56.8232 32.763672 m
57.491199 32.763672 57.946301 32.522461 58.1875 32.040001 c
58.317299 31.7803 58.381802 31.430201 58.381802 30.991199 c
58.381802 27.684601 l
57.514599 27.684601 l
57.514599 31.1357 l
57.514599 31.466499 57.430599 31.693701 57.263699 31.8174 c
57.0998 31.941 56.899101 32.002899 56.661098 32.002899 c
56.3335 32.002899 56.050499 31.8932 55.8125 31.6738 c
55.577499 31.4543 55.459999 31.087601 55.459999 30.5742 c
55.459999 27.684601 l
54.610401 27.684601 l
54.610401 30.9268 l
54.610401 31.263599 54.570499 31.509399 54.4902 31.664101 c
54.3634 31.896 54.126598 32.0117 53.7803 32.0117 c
53.464901 32.0117 53.1777 31.8897 52.917999 31.6455 c
52.661301 31.401199 52.532299 30.959299 52.5322 30.3193 c
52.5322 27.684601 l
51.6973 27.684601 l
51.6973 32.65234 l
52.523399 32.65234 l
52.523399 31.9473 l
52.721298 32.191502 52.9007 32.369202 53.061501 32.480499 c
53.3367 32.669048 53.648701 32.763672 53.998001 32.763672 c
54.393902 32.763672 54.712898 32.6665 54.954102 32.471699 c
55.090199 32.360401 55.213902 32.195999 55.325199 31.9795 c
55.5107 32.245399 55.729 32.441601 55.9795 32.568359 c
56.2299 32.698189 56.511002 32.763672 56.8232 32.763672 c
h
W
0 0 132 43 rc
50.6973 33.763672 m
59.381802 33.763672 l
59.381802 26.684601 l
50.6973 26.684601 l
h
f
Q
q
92.570297 31.9795 m
92.768204 32.23 92.9468 32.4067 93.1045 32.508789 c
93.373398 32.68483 93.708702 32.772419 94.110397 32.772461 c
94.830902 32.772461 95.319504 32.520672 95.576202 32.016602 c
95.715302 31.7414 95.785202 31.359699 95.785202 30.871099 c
95.785202 27.684601 l
94.926804 27.684601 l
94.926804 30.815399 l
94.926804 31.1803 94.880898 31.448099 94.788101 31.6182 c
94.636597 31.8902 94.351898 32.026299 93.934601 32.026402 c
93.588303 32.026402 93.274498 31.9069 92.993202 31.6689 c
92.7118 31.430901 92.570297 30.981001 92.570297 30.3193 c
92.570297 27.684601 l
91.735397 27.684601 l
91.735397 34.521481 l
92.570297 34.521481 l
92.570297 31.9795 l
h
W
0 0 132 43 rc
90.735397 35.521481 m
96.785202 35.521481 l
96.785202 26.684601 l
90.735397 26.684601 l
h
f
Q
q
107.058 32.763672 m
107.725 32.763672 108.18 32.522331 108.421 32.040001 c
108.551 31.7803 108.616 31.4303 108.616 30.991199 c
108.616 27.684601 l
107.749 27.684601 l
107.749 31.1357 l
107.749 31.466499 107.665 31.693701 107.498 31.8174 c
107.334 31.941 107.133 32.002899 106.896 32.002899 c
106.568 32.002899 106.284 31.8934 106.046 31.6738 c
105.811 31.4543 105.693 31.0875 105.693 30.5742 c
105.693 27.684601 l
104.845 27.684601 l
104.845 30.9268 l
104.845 31.263599 104.805 31.509399 104.725 31.664101 c
104.598 31.896 104.361 32.0117 104.015 32.0117 c
103.699 32.0117 103.411 31.889799 103.151 31.6455 c
102.895 31.401199 102.767 30.959101 102.767 30.3193 c
102.767 27.684601 l
101.932 27.684601 l
101.932 32.65234 l
102.758 32.65234 l
102.758 31.9473 l
102.956 32.191502 103.135 32.369202 103.296 32.480499 c
103.571 32.669029 103.883 32.763672 104.232 32.763672 c
104.628 32.763672 104.947 32.6665 105.188 32.471699 c
105.325 32.360401 105.448 32.1959 105.56 31.9795 c
105.745 32.2453 105.963 32.441601 106.213 32.568359 c
106.463 32.698238 106.745 32.763672 107.058 32.763672 c
h
W
0 0 132 43 rc
100.932 33.763672 m
109.616 33.763672 l
109.616 26.684601 l
100.932 26.684601 l
h
f
Q
q
117.17 32.763672 m
117.875 32.763672 118.351 32.51786 118.599 32.026402 c
118.735 31.757299 118.803 31.372101 118.803 30.871099 c
118.803 27.684601 l
117.954 27.684601 l
117.954 30.815399 l
117.954 31.118299 117.909 31.362301 117.819 31.547899 c
117.671 31.857 117.402 32.0117 117.013 32.0117 c
116.815 32.0117 116.652 31.9923 116.525 31.952101 c
116.297 31.884199 116.096 31.747801 115.923 31.5439 c
115.784 31.379999 115.692 31.209499 115.648 31.033199 c
115.608 30.860001 115.589 30.610701 115.589 30.2861 c
115.589 27.684601 l
114.754 27.684601 l
114.754 32.65234 l
115.547 32.65234 l
115.547 31.9473 l
115.782 32.2379 116.031 32.446499 116.294 32.573238 c
116.557 32.699909 116.849 32.763672 117.17 32.763672 c
h
W
0 0 132 43 rc
113.754 33.763672 m
119.803 33.763672 l
119.803 26.684601 l
113.754 26.684601 l
h
f
Q
q
49.772499 33.551762 0.84859997 0.94629002 rc
48.772499 35.498051 m
51.621101 35.498051 l
51.621101 32.551762 l
48.772499 32.551762 l
h
f
ep
end
%%Trailer
%%EOF
